{"version":3,"sources":["newusers/src/NewUsersWidget.js"],"names":["$","Craft","NewUsersWidget","Garnish","Base","extend","settings","data","startDate","endDate","$widget","$body","widgetId","this","setSettings","find","$error","dateRange","$chartContainer","appendTo","getDateByDays","requestData","postActionRequest","getDateValue","textStatus","response","removeClass","userGroupId","yAxis","proxy","formatter","chart","error","Math","charts","Area","d","formatLocale","format","round","chartDataTable","DataTable","dataTable","chartSettings","orientation","dataScale","scale","formats","draw","grid","on","instances","push","msg","html","splice","days","date","getTime","floor","destroy","inArray","base","Date","jQuery"],"mappings":"CAAA,SAACA,GAEGC,MAAAC,eAAAC,QAAAC,KAAAC,OACMH,CAEUI,SADZ,KAEUC,KAFV,KAGIC,UAHJ,KAIWC,QAJX,KAOWC,QAPX,KASUC,MAAA,KAGGD,KAAL,SAAiBE,EAAYA,GAWrB,OAVRC,KAAaC,YAAaC,GAErBC,KAAUN,QAACV,EAAA,UAAFY,GAEVK,KAASN,MAAQL,KAAAA,QAASW,KAA9B,eAHAJ,KAAKK,gBAAkBlB,EAAE,oCAAoCmB,SAASN,KAAKF,OAKnEM,KAAAA,OAARjB,EAAA,wBAAAmB,SAAAN,KAAAF,OAE8BE,KAACX,SAAAA,WAD3B,IAAK,KAKLW,KAAAL,UAAAP,MAAAC,eAAAkB,cAAA,GACIP,KAAiBZ,QAAMC,IAAAA,KACvB,MAFJ,IAAK,MAKLW,KAAAL,UAAAP,MAAAC,eAAAkB,cAAA,IACIP,KAAiBZ,QAAMC,IAAAA,KACvB,MAFJ,IAAK,WAKLW,KAAAL,UAAAP,MAAAC,eAAAkB,cAAA,IACIP,KAAiBZ,QAAMC,MAAAA,eAAekB,cAAtC,GACA,MAIR,IAAA,YALQP,KAAKL,UAAYP,MAAMC,eAAekB,cAAc,IACpDP,KAAKJ,QAAUR,MAAMC,eAAekB,cAAc,IAK1D,IAAAC,EAAA,CAMMC,UAAkBrB,MAAAC,eAAAqB,aAA6BF,KAArDb,WACQgB,QAAevB,MAAAC,eAAoBuB,aAAPZ,KAA2BJ,SAClDS,YAAgBQ,KAAAA,SAAYC,aAI7BC,MAAON,kBAAA,4BAAAD,EAAArB,EAAA6B,OAAA,SAAAJ,EAAAD,GACHM,GAAoBC,YAAXP,QAAkB,IAAAC,EAAAO,MAAA,CAChBnB,KAAAK,gBAAYQ,YAAA,UAGVb,KAAIoB,MAAA,IAAThC,MAAwBiC,OAAAC,KAAAtB,KAAAK,gBAAA,CACdU,MAAN,CACHE,UAAA,SAAAC,GALL,OAAO,SAASK,GAOCC,IAAaC,EAAOA,OAQ7B,OANXF,GAAAH,KAAAM,MAAAH,KAXEE,EAAA,QAiBSP,EAAAM,aAAAC,OAAAA,EAAAP,CAAAK,QAFpB,IAAII,EAAiB,IAAIvC,MAAMiC,OAAOO,UAAUhB,EAASiB,WAaxDC,EAAA,CACDC,YAAAnB,EAAAmB,YACkBC,UAAApB,EAAAqB,MAVdC,QAAStB,EAASsB,SAcrBlC,KAAAkB,MAAAiB,KAAAR,EAAAG,GAGWjB,OAAAA,UAAYuB,KAAxBC,GAAA,cAAAlD,EAAA6B,MAAAhB,KAAA,0BA3CR,CAiDMX,IAAeiD,EAAAA,MAAUC,EAAK,iCAGV,IAAA3B,GAAAA,QAAA,IAAAA,EAAAO,QAC1BqB,EAAA5B,EAAAO,OAIM9B,KAAeiD,OAArBG,KAA+BC,GAC/B1C,KAAAG,OAAAU,YAAA,aAELb,OAGCO,KAAeV,QAAS8C,KAAT,UAAeN,GAAA,UAAAlD,EAAA6B,MAAAhB,KAAA,YAEnB4C,MAAKC,eAAaP,UAAeK,KAAO3C,OAInDU,kBAAuBkC,WACZxB,KAAK0B,MAAMF,UA1HlCG,QAAA,WA6GgB3D,MAAMC,eAAeiD,UAAUI,OAAOvD,EAAE6D,QAAQhD,KAAMZ,MAAMC,eAAeiD,WAAY,GACvFtC,KAAKiD,SAEV,CACCX,UAAW,GAEX/B,cAAe,SAASoC,GACpB,IAAIC,EAAO,IAAIM,KAEf,OADAN,EAAOA,EAAKC,UAAa,MAAeF,EAAO,IACxC,IAAIO,KAAKN,IAGpBlC,aAAc,SAASkC,GACnB,OAAOxB,KAAK0B,MAAMF,EAAKC,UAAY,QA1HnD,CA6HGM","file":"NewUsersWidget.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.NewUsersWidget = Garnish.Base.extend(\n        {\n            settings: null,\n            data: null,\n            startDate: null,\n            endDate: null,\n\n            $widget: null,\n            $body: null,\n\n            init: function(widgetId, settings) {\n                this.setSettings(settings);\n\n                this.$widget = $('#widget' + widgetId);\n                this.$body = this.$widget.find('.body:first');\n                this.$chartContainer = $('<div class=\"chart hidden\"></div>').appendTo(this.$body);\n                this.$error = $('<div class=\"error\"/>').appendTo(this.$body);\n\n                var dateRange = this.settings.dateRange;\n\n                switch (dateRange) {\n                    case 'd7':\n                        this.startDate = Craft.NewUsersWidget.getDateByDays(6);\n                        this.endDate = new Date();\n                        break;\n\n                    case 'd30':\n                        this.startDate = Craft.NewUsersWidget.getDateByDays(30);\n                        this.endDate = new Date();\n                        break;\n\n                    case 'lastweek':\n                        this.startDate = Craft.NewUsersWidget.getDateByDays(13);\n                        this.endDate = Craft.NewUsersWidget.getDateByDays(7);\n                        break;\n\n                    case 'lastmonth':\n                        this.startDate = Craft.NewUsersWidget.getDateByDays(60);\n                        this.endDate = Craft.NewUsersWidget.getDateByDays(30);\n                        break;\n                }\n\n                // Request orders report\n                var requestData = {\n                    startDate: Craft.NewUsersWidget.getDateValue(this.startDate),\n                    endDate: Craft.NewUsersWidget.getDateValue(this.endDate),\n                    userGroupId: this.settings.userGroupId\n                };\n\n                Craft.postActionRequest('charts/get-new-users-data', requestData, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && typeof(response.error) === 'undefined') {\n                        this.$chartContainer.removeClass('hidden');\n\n                        // Create chart\n                        this.chart = new Craft.charts.Area(this.$chartContainer, {\n                            yAxis: {\n                                formatter: function(chart) {\n                                    return function(d) {\n                                        var format = ',.0f';\n\n                                        if (d != Math.round(d)) {\n                                            format = ',.1f';\n                                        }\n\n                                        return chart.formatLocale.format(format)(d);\n                                    };\n                                }\n                            }\n                        });\n\n                        var chartDataTable = new Craft.charts.DataTable(response.dataTable);\n\n                        var chartSettings = {\n                            orientation: response.orientation,\n                            dataScale: response.scale,\n                            formats: response.formats\n                        };\n\n                        this.chart.draw(chartDataTable, chartSettings);\n\n                        // Resize chart when grid is refreshed\n                        window.dashboard.grid.on('refreshCols', $.proxy(this, 'handleGridRefresh'));\n                    }\n                    else {\n                        // Error\n                        var msg = Craft.t('A server error occurred.');\n\n                        if (typeof(response) !== 'undefined' && response && typeof(response.error) !== 'undefined') {\n                            msg = response.error;\n                        }\n\n                        this.$error.html(msg);\n                        this.$error.removeClass('hidden');\n                    }\n                }, this));\n\n                this.$widget.data('widget').on('destroy', $.proxy(this, 'destroy'));\n\n                Craft.NewUsersWidget.instances.push(this);\n            },\n\n            handleGridRefresh: function() {\n                this.chart.resize();\n            },\n\n            destroy: function() {\n                Craft.NewUsersWidget.instances.splice($.inArray(this, Craft.NewUsersWidget.instances), 1);\n                this.base();\n            }\n        }, {\n            instances: [],\n\n            getDateByDays: function(days) {\n                var date = new Date();\n                date = date.getTime() - (60 * 60 * 24 * days * 1000);\n                return new Date(date);\n            },\n\n            getDateValue: function(date) {\n                return Math.floor(date.getTime() / 1000);\n            }\n        });\n})(jQuery);\n"]}
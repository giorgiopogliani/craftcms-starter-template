{"version":3,"sources":["tablesettings/src/TableFieldSettings.js"],"names":["$","Craft","TableFieldSettings","Garnish","Base","extend","columnsTableName","defaultsTableName","columnsData","columnsTableId","defaultsTableId","columnsTableInputPath","defaultsTableInputPath","columnSettings","dropdownSettingsHtml","columnsTable","defaultsTable","formatInputId","defaults","dropdownSettingsCols","filterArray","this","initColumnsTable","split","initDefaultsTable","ColumnTable","defaultValues","proxy","onDeleteRow","EditableTable","rowIdPrefix","type","reconstructDefaultsTable","initColumnSettingInputs","$tr","addListener","$textareas","onAddColumn","$container","find","colId","options","expandPostArray","getPostData","$tbody","i","key","length","hasOwnProperty","rowObj","data","theadHtml","heading","id","fieldSettings","appendTo","$table","base","rowId","settings","createRow","replaceWith","destroy","settingsModal","init","table","baseName","columns","initialize","$settingsBtn","createRowObj","Row","$typeSelect","optionsTable","tr","removeClass","addClass","$typeCell","showSettingsModal","$modal","$bod","data-icon","class","append","$typeSelectContainer","row","closest","handleTypeChange","val","onHide","show","Math","floor","random","$closeButton","hide","html","replace","onAddRow","handleOptionsRowChange","updateSizeAndPosition","addRow","label","value","handleSettingsModalHide","prop","default","$row","t","$body","Modal","setTimeout","first","trigger","$rows","eq","push","handleFormSubmit","ev","name","JSON","stringify","currentTarget","jQuery"],"mappings":"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","file":"TableFieldSettings.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.TableFieldSettings = Garnish.Base.extend(\n        {\n            columnsTableName: null,\n            defaultsTableName: null,\n            columnsData: null,\n            columnsTableId: null,\n            defaultsTableId: null,\n            columnsTableInputPath: null,\n            defaultsTableInputPath: null,\n\n            defaults: null,\n            columnSettings: null,\n\n            dropdownSettingsHtml: null,\n            dropdownSettingsCols: null,\n\n            columnsTable: null,\n            defaultsTable: null,\n\n            init: function(columnsTableName, defaultsTableName, columnsData, defaults, columnSettings, dropdownSettingsHtml, dropdownSettingsCols) {\n                this.columnsTableName = columnsTableName;\n                this.defaultsTableName = defaultsTableName;\n                this.columnsData = columnsData;\n\n                this.columnsTableId = Craft.formatInputId(this.columnsTableName);\n                this.defaultsTableId = Craft.formatInputId(this.defaultsTableName);\n\n                this.columnsTableInputPath = Craft.filterArray(this.columnsTableName.split(/[\\[\\]]+/));\n                this.defaultsTableInputPath = Craft.filterArray(this.defaultsTableName.split(/[\\[\\]]+/));\n\n                this.defaults = defaults;\n                this.columnSettings = columnSettings;\n\n                this.dropdownSettingsHtml = dropdownSettingsHtml;\n                this.dropdownSettingsCols = dropdownSettingsCols;\n\n                this.initColumnsTable();\n                this.initDefaultsTable();\n            },\n\n            initColumnsTable: function() {\n                this.columnsTable = new ColumnTable(this, this.columnsTableId, this.columnsTableName, this.columnSettings, {\n                    rowIdPrefix: 'col',\n                    defaultValues: {\n                        type: 'singleline'\n                    },\n                    onAddRow: $.proxy(this, 'onAddColumn'),\n                    onDeleteRow: $.proxy(this, 'reconstructDefaultsTable')\n                });\n            },\n\n            initDefaultsTable: function() {\n                this.defaultsTable = new Craft.EditableTable(this.defaultsTableId, this.defaultsTableName, this.columnsData, {\n                    rowIdPrefix: 'row'\n                });\n            },\n\n            onAddColumn: function($tr) {\n                this.reconstructDefaultsTable();\n                this.initColumnSettingInputs($tr);\n            },\n\n            initColumnSettingInputs: function($container) {\n                var $textareas = $container.find('td:first-child textarea, td:nth-child(3) textarea');\n                this.addListener($textareas, 'input', 'reconstructDefaultsTable');\n            },\n\n            reconstructDefaultsTable: function() {\n                this.columnsData = Craft.expandPostArray(Garnish.getPostData(this.columnsTable.$tbody));\n                var defaults = Craft.expandPostArray(Garnish.getPostData(this.defaultsTable.$tbody));\n\n                var i, key;\n\n                for (i = 0; i < this.columnsTableInputPath.length; i++) {\n                    key = this.columnsTableInputPath[i];\n                    this.columnsData = this.columnsData[key];\n                }\n\n                // Add in the dropdown options\n                for (let colId in this.columnsData) {\n                    if (this.columnsData.hasOwnProperty(colId) && this.columnsData[colId].type === 'select') {\n                        var rowObj = this.columnsTable.$tbody.find('tr[data-id=\"' + colId + '\"]').data('editable-table-row');\n                        this.columnsData[colId].options = rowObj.options || [];\n                    }\n                }\n\n                for (i = 0; i < this.defaultsTableInputPath.length; i++) {\n                    key = this.defaultsTableInputPath[i];\n\n                    if (typeof defaults[key] === 'undefined') {\n                        defaults = {};\n                        break;\n                    }\n                    else {\n                        defaults = defaults[key];\n                    }\n                }\n\n                var theadHtml = '<thead>' +\n                    '<tr>';\n\n                for (let colId in this.columnsData) {\n                    if (!this.columnsData.hasOwnProperty(colId)) {\n                        continue;\n                    }\n\n                    theadHtml += '<th scope=\"col\">' + (this.columnsData[colId].heading ? this.columnsData[colId].heading : '&nbsp;') + '</th>';\n                }\n\n                theadHtml += '<th colspan=\"2\"></th>' +\n                    '</tr>' +\n                    '</thead>';\n\n                var $table = $('<table/>', {\n                    id: this.defaultsTableId,\n                    'class': 'editable fullwidth'\n                }).append(theadHtml);\n\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                for (var rowId in defaults) {\n                    if (!defaults.hasOwnProperty(rowId)) {\n                        continue;\n                    }\n\n                    Craft.EditableTable.createRow(rowId, this.columnsData, this.defaultsTableName, defaults[rowId]).appendTo($tbody);\n                }\n\n                this.defaultsTable.$table.replaceWith($table);\n                this.defaultsTable.destroy();\n                delete this.defaultsTable;\n                this.initDefaultsTable();\n            }\n        });\n\n    var ColumnTable = Craft.EditableTable.extend({\n        fieldSettings: null,\n\n        init: function(fieldSettings, id, baseName, columns, settings) {\n            this.fieldSettings = fieldSettings;\n            this.base(id, baseName, columns, settings);\n        },\n\n        initialize: function() {\n            if (!this.base()) {\n                return false;\n            }\n\n            this.fieldSettings.initColumnSettingInputs(this.$tbody);\n            this.sorter.settings.onSortChange = $.proxy(this.fieldSettings.reconstructDefaultsTable, this.fieldSettings);\n            return true;\n        },\n\n        createRowObj: function($tr) {\n            return new ColumnTable.Row(this, $tr);\n        }\n    });\n\n    ColumnTable.Row = Craft.EditableTable.Row.extend({\n        $typeSelect: null,\n        $settingsBtn: null,\n\n        options: null,\n        settingsModal: null,\n        optionsTable: null,\n\n        init: function(table, tr) {\n            this.base(table, tr);\n\n            if (this.table.fieldSettings.columnsData[this.id]) {\n                this.options = this.table.fieldSettings.columnsData[this.id].options || null;\n            }\n\n            var $typeCell = this.$tr.find('td:nth-child(4)');\n            var $typeSelectContainer = $typeCell.find('.select');\n            this.$settingsBtn = $typeCell.find('.settings');\n\n            if (!this.$settingsBtn.length) {\n                this.$settingsBtn = $('<a/>', {\n                    'class': 'settings light invisible',\n                    role: 'button',\n                    'data-icon': 'settings'\n                });\n                $('<div/>', {'class': 'flex flex-nowrap'})\n                    .appendTo($typeCell)\n                    .append($typeSelectContainer)\n                    .append(this.$settingsBtn);\n            }\n\n            this.$typeSelect = $typeSelectContainer.find('select');\n            this.addListener(this.$typeSelect, 'change', 'handleTypeChange');\n            this.addListener(this.$settingsBtn, 'click', 'showSettingsModal');\n\n            this.addListener(this.$tr.closest('form'), 'submit', 'handleFormSubmit');\n        },\n\n        handleTypeChange: function() {\n            if (this.$typeSelect.val() === 'select') {\n                this.$settingsBtn.removeClass('invisible');\n            } else {\n                this.$settingsBtn.addClass('invisible');\n            }\n\n            this.table.fieldSettings.reconstructDefaultsTable();\n        },\n\n        showSettingsModal: function(ev) {\n            if (!this.settingsModal) {\n                var id = 'dropdownsettingsmodal' + Math.floor(Math.random() * 1000000);\n                var $modal = $('<div/>', {'class': 'modal dropdownsettingsmodal'}).appendTo(Garnish.$bod);\n                var $body = $('<div/>', {'class': 'body'})\n                    .appendTo($modal)\n                    .html(this.table.fieldSettings.dropdownSettingsHtml.replace(/__ID__/g, id));\n\n                this.optionsTable = new Craft.EditableTable(id, '__NAME__', this.table.fieldSettings.dropdownSettingsCols, {\n                    onAddRow: $.proxy(this, 'handleOptionsRowChange'),\n                    onDeleteRow: $.proxy(this, 'handleOptionsRowChange')\n                });\n\n                if (this.options && this.options.length) {\n                    var row;\n                    for (var i = 0; i < this.options.length; i++) {\n                        row = this.optionsTable.addRow(false);\n                        row.$tr.find('.option-label textarea').val(this.options[i].label);\n                        row.$tr.find('.option-value textarea').val(this.options[i].value);\n                        row.$tr.find('.option-default input[type=\"checkbox\"]').prop('checked', !!this.options[i].default);\n                    }\n                } else {\n                    this.optionsTable.addRow(false);\n                }\n\n                var $closeButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Done')\n                }).appendTo($body);\n\n                this.settingsModal = new Garnish.Modal($modal, {\n                    onHide: $.proxy(this, 'handleSettingsModalHide')\n                });\n\n                this.addListener($closeButton, 'click', function() {\n                    this.settingsModal.hide();\n                });\n            } else {\n                this.settingsModal.show();\n            }\n\n            setTimeout($.proxy(function() {\n                this.optionsTable.$tbody.find('textarea').first().trigger('focus')\n            }, this), 100);\n        },\n\n        handleOptionsRowChange: function() {\n            if (this.settingsModal) {\n                this.settingsModal.updateSizeAndPosition();\n            }\n        },\n\n        handleSettingsModalHide: function() {\n            this.options = [];\n            var $rows = this.optionsTable.$table.find('tbody tr');\n            for (var i = 0; i < $rows.length; i++) {\n                let $row  = $rows.eq(i);\n                this.options.push({\n                    label: $row.find('.option-label textarea').val(),\n                    value: $row.find('.option-value textarea').val(),\n                    default: $row.find('.option-default input[type=checkbox]').prop('checked')\n                })\n            }\n\n            this.table.fieldSettings.reconstructDefaultsTable();\n        },\n\n        handleFormSubmit: function(ev) {\n            if (this.$typeSelect.val() === 'select') {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: this.table.fieldSettings.columnsTableName + '[' + this.id + '][options]',\n                    value: JSON.stringify(this.options)\n                }).appendTo(ev.currentTarget);\n            }\n        }\n    });\n})(jQuery);\n"]}
{"version":3,"sources":["dashboard/src/Dashboard.js"],"names":["$","Craft","Dashboard","Garnish","Base","extend","$widgetManagerBtn","widgetTypes","grid","widgets","widgetManager","widgetAdminTable","widgetSettingsModal","$doc","ready","addListener","data","proxy","this","$grid","property","defaultValue","menu","on","getTypeInfo","type","handleNewWidgetOptionSelect","e","$option","toLowerCase","append","settingsNamespace","Math","floor","random","settingsHtml","replace","settingsJs","$gridItem","$container","class","data-type","addClass","name","value","text","t","response","success","appendTo","$noWidgets","children","$widgets","length","widget","Widget","noObjectsSelector","$items","insertAfter","HUD","removeClass","scrollContainerToElement","lastWidget","postActionRequest","textStatus","i","ids","prependTo","showWidgetManager","show","resetItemOrder","find","$form","$bod","$table","eq","id","getManagerRow","$tbody","hudClass","onShow","onHide","AdminTable","tableSelector","sortable","reorderAction","deleteAction","onReorderItems","container","initSettingsFn","parent","onDeleteItem","$front","$settingsContainer","$btnsContainer","$title","getColspan","$heading","$bodyContainer","$settingsForm","$settingsErrorList","setSettingsHtml","subtitle","totalCols","$settingsBtn","showingSettings","refreshSettings","requestAnimationFrame","initUiElements","title","velocity","complete","$subtitle","hasClass","initBackUi","preventDefault","onShowBack","serialize","$back","$settingsSpinner","displayNotice","destroy","setColspan","colspan","displayError","window","dashboard","prepend","html","showSettings","remove","height","hideSettings","appendHeadHtml","appendFootHtml","info","action","cp","update","trigger","errors","ui","createErrorList","attr","addRow","getManagerRowLabel","removeItems","bodyHtml","headHtml","footHtml","eval","cancelSettings","onShowFront","removeListener","setTimeout","updateContainerHeight","$row","escapeHtml","colspanPicker","SlidePicker","min","max","step","valueLabel","num","onChange","refreshCols","refresh","typeName","base","jQuery"],"mappings":"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","file":"Dashboard.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Dashboard class\n     */\n    Craft.Dashboard = Garnish.Base.extend(\n        {\n            $grid: null,\n            $widgetManagerBtn: null,\n\n            widgetTypes: null,\n            grid: null,\n            widgets: null,\n            widgetManager: null,\n            widgetAdminTable: null,\n            widgetSettingsModal: null,\n\n            init: function(widgetTypes) {\n                this.widgetTypes = widgetTypes;\n                this.widgets = {};\n\n                this.$widgetManagerBtn = $('#widgetManagerBtn');\n\n                this.addListener(this.$widgetManagerBtn, 'click', 'showWidgetManager');\n\n                Garnish.$doc.ready($.proxy(function() {\n                    this.$grid = $('#dashboard-grid');\n                    this.grid = this.$grid.data('grid');\n                    $('#newwidgetmenubtn').data('menubtn').menu.on('optionselect', $.proxy(this, 'handleNewWidgetOptionSelect'));\n                }, this));\n            },\n\n            getTypeInfo: function(type, property, defaultValue) {\n                if (property) {\n                    if (typeof this.widgetTypes[type][property] === 'undefined') {\n                        return defaultValue;\n                    }\n                    else {\n                        return this.widgetTypes[type][property];\n                    }\n                }\n                else {\n                    return this.widgetTypes[type];\n                }\n            },\n\n            handleNewWidgetOptionSelect: function(e) {\n                var $option = $(e.selectedOption),\n                    type = $option.data('type'),\n                    settingsNamespace = 'newwidget' + Math.floor(Math.random() * 1000000000) + '-settings',\n                    settingsHtml = this.getTypeInfo(type, 'settingsHtml', '').replace(/__NAMESPACE__/g, settingsNamespace),\n                    settingsJs = this.getTypeInfo(type, 'settingsJs', '').replace(/__NAMESPACE__/g, settingsNamespace),\n                    $gridItem = $('<div class=\"item\" data-colspan=\"1\" style=\"display: block\">'),\n                    $container = $('<div/>', {\n                      'class': 'widget new loading-new scaleout',\n                      'data-type': type,\n                    })\n                      .addClass(type.toLowerCase())\n                      .append(\n                        $('<div/>', {'class': 'front'})\n                          .append(\n                            $('<div/>', {'class': 'pane'})\n                              .append(\n                                $('<div/>', {'class': 'spinner body-loading'})\n                              )\n                              .append(\n                                $('<div/>', {'class': 'widget-heading'})\n                                  .append('<h2/>')\n                                  .append('<h5/>')\n                              )\n                              .append(\n                                $('<div/>', {'class': 'body'})\n                              )\n                              .append(\n                                $('<div/>', {'class': 'settings icon hidden'})\n                              )\n                          )\n                      )\n                      .append(\n                        $('<div/>', {'class': 'back'})\n                          .append(\n                            $('<form/>', {'class': 'pane'})\n                              .append(\n                                $('<input/>', {\n                                  type: 'hidden',\n                                  name: 'type',\n                                  value: type,\n                                })\n                              )\n                              .append(\n                                $('<input/>', {\n                                  type: 'hidden',\n                                  name: 'settingsNamespace',\n                                  value: settingsNamespace,\n                                })\n                              )\n                              .append(\n                                $('<h2/>', {\n                                  text: Craft.t('app', '{type} Settings', {\n                                    type: $option.data('name')\n                                  }),\n                                })\n                              )\n                              .append(\n                                $('<div/>', {'class': 'settings'})\n                              )\n                              .append('<hr/>')\n                              .append(\n                                $('<div/>', {'class': 'buttons clearafter'})\n                                  .append(\n                                    $('<button/>', {\n                                      type: 'submit',\n                                      'class': 'btn submit',\n                                      text: Craft.t('app', 'Save'),\n                                    })\n                                  )\n                                  .append(\n                                    $('<button/>', {\n                                      type: 'button',\n                                      'class': 'btn',\n                                      text: Craft.t('app', 'Cancel')\n                                    })\n                                  )\n                                  .append(\n                                    $('<div/>', {'class': 'spinner hidden'})\n                                  )\n                              )\n                          )\n                      )\n                      .appendTo($gridItem);\n\n                if (settingsHtml) {\n                    $container.addClass('flipped');\n                    $container.children('.front').addClass('hidden');\n                }\n                else {\n                    $container.addClass('loading');\n                    $container.children('.back').addClass('hidden');\n                }\n\n                var widget = new Craft.Widget($container, settingsHtml.replace(/__NAMESPACE__/g, settingsNamespace), function() {\n                    eval(settingsJs);\n                });\n\n                // Append the new widget after the last one\n                // (can't simply append it to the grid container, since that will place it after the resize listener object)\n\n                if (this.grid.$items.length) {\n                    $gridItem.insertAfter(this.grid.$items.last());\n                }\n                else {\n                    $gridItem.prependTo(this.grid.$container);\n                }\n\n                this.grid.addItems($gridItem);\n                Garnish.scrollContainerToElement($gridItem);\n\n                $container.removeClass('scaleout');\n\n                if (!settingsHtml) {\n                    var data = {\n                        type: type\n                    };\n\n                    Craft.postActionRequest('dashboard/create-widget', data, function(response, textStatus) {\n                        if (textStatus === 'success' && response.success) {\n                            $container.removeClass('loading');\n                            widget.update(response);\n                        }\n                        else {\n                            widget.destroy();\n                        }\n                    });\n                }\n            },\n\n            showWidgetManager: function() {\n                if (!this.widgetManager) {\n                    var $widgets = this.$grid.find('> .item > .widget'),\n                        $form = $(\n                            '<form method=\"post\" accept-charset=\"UTF-8\">' +\n                            '<input type=\"hidden\" name=\"action\" value=\"widgets/save-widget\"/>' +\n                            '</form>'\n                        ).appendTo(Garnish.$bod),\n                        $noWidgets = $('<p id=\"nowidgets\"' + ($widgets.length ? ' class=\"hidden\"' : '') + '>' + Craft.t('app', 'You don’t have any widgets yet.') + '</p>').appendTo($form),\n                        $table = $('<table class=\"data' + (!$widgets.length ? ' hidden' : '') + '\"/>').appendTo($form),\n                        $tbody = $('<tbody/>').appendTo($table);\n\n                    for (var i = 0; i < $widgets.length; i++) {\n                        var $widget = $widgets.eq(i),\n                            widget = $widget.data('widget');\n\n                        // Make sure it's actually saved\n                        if (!widget || !widget.id) {\n                            continue;\n                        }\n\n                        widget.getManagerRow().appendTo($tbody);\n                    }\n\n                    this.widgetManager = new Garnish.HUD(this.$widgetManagerBtn, $form, {\n                        hudClass: 'hud widgetmanagerhud',\n                        onShow: $.proxy(function() {\n                            this.$widgetManagerBtn.addClass('active');\n                        }, this),\n                        onHide: $.proxy(function() {\n                            this.$widgetManagerBtn.removeClass('active');\n                        }, this)\n                    });\n\n                    this.widgetAdminTable = new Craft.AdminTable({\n                        tableSelector: $table,\n                        noObjectsSelector: $noWidgets,\n                        sortable: true,\n                        reorderAction: 'dashboard/reorder-user-widgets',\n                        deleteAction: 'dashboard/delete-user-widget',\n                        onReorderItems: $.proxy(function(ids) {\n                            var lastWidget = null;\n\n                            for (var i = 0; i < ids.length; i++) {\n                                var widget = this.widgets[ids[i]];\n\n                                if (!lastWidget) {\n                                    widget.$gridItem.prependTo(this.$grid);\n                                }\n                                else {\n                                    widget.$gridItem.insertAfter(lastWidget.$gridItem);\n                                }\n\n                                lastWidget = widget;\n                            }\n\n                            this.grid.resetItemOrder();\n                        }, this),\n                        onDeleteItem: $.proxy(function(id) {\n                            var widget = this.widgets[id];\n\n                            widget.destroy();\n                        }, this)\n                    });\n                }\n                else {\n                    this.widgetManager.show();\n                }\n            }\n        });\n\n\n    /**\n     * Dashboard Widget class\n     */\n    Craft.Widget = Garnish.Base.extend(\n        {\n            $container: null,\n            $gridItem: null,\n\n            $front: null,\n            $settingsBtn: null,\n            $title: null,\n            $subtitle: null,\n            $heading: null,\n            $bodyContainer: null,\n\n            $back: null,\n            $settingsForm: null,\n            $settingsContainer: null,\n            $settingsSpinner: null,\n            $settingsErrorList: null,\n\n            id: null,\n            type: null,\n            title: null,\n            subtitle: null,\n\n            totalCols: null,\n            settingsHtml: null,\n            initSettingsFn: null,\n            showingSettings: false,\n\n            colspanPicker: null,\n\n            init: function(container, settingsHtml, initSettingsFn) {\n                this.$container = $(container);\n                this.$gridItem = this.$container.parent();\n\n                // Store a reference to this object on the container element\n                this.$container.data('widget', this);\n\n                // Do a little introspection\n                this.id = this.$container.data('id');\n                this.type = this.$container.data('type');\n                this.title = this.$container.data('title');\n\n                if (this.id) {\n                    // Store a reference to this object on the main Dashboard object\n                    window.dashboard.widgets[this.id] = this;\n                }\n\n                this.$front = this.$container.children('.front');\n                this.$settingsBtn = this.$front.find('> .pane > .icon.settings');\n                this.$heading = this.$front.find('> .pane > .widget-heading');\n                this.$title = this.$heading.find('> h2');\n                this.$subtitle = this.$heading.find('> h5');\n                this.$bodyContainer = this.$front.find('> .pane > .body');\n\n                this.setSettingsHtml(settingsHtml, initSettingsFn);\n\n                if (!this.$container.hasClass('flipped')) {\n                    this.onShowFront();\n                }\n                else {\n                    this.initBackUi();\n                    this.refreshSettings();\n                    this.onShowBack();\n                }\n\n                this.addListener(this.$settingsBtn, 'click', 'showSettings');\n            },\n\n            initBackUi: function() {\n                this.$back = this.$container.children('.back');\n                this.$settingsForm = this.$back.children('form');\n                this.$settingsContainer = this.$settingsForm.children('.settings');\n                var $btnsContainer = this.$settingsForm.children('.buttons');\n                this.$settingsSpinner = $btnsContainer.children('.spinner');\n\n                this.addListener($btnsContainer.children('.btn:nth-child(2)'), 'click', 'cancelSettings');\n                this.addListener(this.$settingsForm, 'submit', 'saveSettings');\n            },\n\n            getColspan: function() {\n                return this.$gridItem.data('colspan');\n            },\n\n            setColspan: function(colspan) {\n                this.$gridItem.data('colspan', colspan);\n                window.dashboard.grid.refreshCols(true);\n            },\n\n            getTypeInfo: function(property, defaultValue) {\n                return window.dashboard.getTypeInfo(this.type, property, defaultValue);\n            },\n\n            setSettingsHtml: function(settingsHtml, initSettingsFn) {\n                this.settingsHtml = settingsHtml;\n                this.initSettingsFn = initSettingsFn;\n\n                if (this.settingsHtml) {\n                    this.$settingsBtn.removeClass('hidden');\n                }\n                else {\n                    this.$settingsBtn.addClass('hidden');\n                }\n            },\n\n            refreshSettings: function() {\n                this.$settingsContainer.html(this.settingsHtml);\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    Craft.initUiElements(this.$settingsContainer);\n                    this.initSettingsFn();\n                }, this));\n            },\n\n            showSettings: function() {\n                if (!this.$back) {\n                    this.initBackUi();\n                }\n\n                // Refresh the settings every time\n                this.refreshSettings();\n\n                this.$back.removeClass('hidden');\n                Garnish.requestAnimationFrame(() => {\n                    this.$container\n                        .addClass('flipped')\n                        .velocity({height: this.$back.height()}, {\n                            complete: $.proxy(this, 'onShowBack')\n                        });\n                });\n            },\n\n            hideSettings: function() {\n                this.$front.removeClass('hidden');\n\n                Garnish.requestAnimationFrame(() => {\n                    this.$container\n                        .removeClass('flipped')\n                        .velocity({height: this.$front.height()}, {\n                            complete: $.proxy(this, 'onShowFront')\n                        });\n                });\n            },\n\n            saveSettings: function(e) {\n                e.preventDefault();\n                this.$settingsSpinner.removeClass('hidden');\n\n                var action = this.$container.hasClass('new') ? 'dashboard/create-widget' : 'dashboard/save-widget-settings',\n                    data = this.$settingsForm.serialize();\n\n                Craft.postActionRequest(action, data, $.proxy(function(response, textStatus) {\n                    this.$settingsSpinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        if (this.$settingsErrorList) {\n                            this.$settingsErrorList.remove();\n                            this.$settingsErrorList = null;\n                        }\n\n                        if (response.success) {\n                            Craft.cp.displayNotice(Craft.t('app', 'Widget saved.'));\n\n                            // Make sure the widget is still allowed to be shown, just in case\n                            if (!response.info) {\n                                this.destroy();\n                            }\n                            else {\n                                this.update(response);\n                                this.hideSettings();\n                            }\n                        }\n                        else {\n                            Craft.cp.displayError(Craft.t('app', 'Couldn’t save widget.'));\n\n                            if (response.errors) {\n                                this.$settingsErrorList = Craft.ui.createErrorList(response.errors)\n                                    .insertAfter(this.$settingsContainer);\n                            }\n                        }\n                    }\n                }, this));\n            },\n\n            update: function(response) {\n                this.title = response.info.title;\n                this.subtitle = response.info.subtitle;\n\n                // Is this a new widget?\n                if (this.$container.hasClass('new')) {\n                    // Discover ourself\n                    this.id = response.info.id;\n\n                    this.$container\n                        .attr('id', 'widget' + this.id)\n                        .removeClass('new loading-new');\n\n                    if (this.$settingsForm) {\n                        this.$settingsForm.prepend('<input type=\"hidden\" name=\"widgetId\" value=\"' + this.id + '\"/>');\n                    }\n\n                    // Store a reference to this object on the main Dashboard object, now that the widget actually exists\n                    window.dashboard.widgets[this.id] = this;\n\n                    if (window.dashboard.widgetAdminTable) {\n                        window.dashboard.widgetAdminTable.addRow(this.getManagerRow());\n                    }\n                }\n                else {\n                    if (window.dashboard.widgetAdminTable) {\n                        window.dashboard.widgetAdminTable.$tbody.children('[data-id=\"' + this.id + '\"]:first').children('td:nth-child(2)').html(this.getManagerRowLabel());\n                    }\n                }\n\n                if (!this.title && !this.subtitle) {\n                    this.$heading.remove();\n                } else {\n                    if (this.title) {\n                        this.$title.text(this.title);\n                    } else {\n                        this.$title.remove();\n                    }\n\n                    if (this.subtitle) {\n                        this.$subtitle.text(this.subtitle);\n                    } else {\n                        this.$subtitle.remove();\n                    }\n                }\n\n                this.$bodyContainer.html(response.info.bodyHtml);\n\n                // New colspan?\n                if (response.info.colspan != this.getColspan()) {\n                    this.setColspan(response.info.colspan);\n                    Garnish.scrollContainerToElement(this.$gridItem);\n                }\n\n                Craft.initUiElements(this.$bodyContainer);\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n\n                this.setSettingsHtml(response.info.settingsHtml, function() {\n                    eval(response.info.settingsJs);\n                });\n            },\n\n            cancelSettings: function() {\n                if (this.id) {\n                    this.hideSettings();\n                }\n                else {\n                    this.destroy();\n                }\n            },\n\n            onShowFront: function() {\n                this.showingSettings = false;\n                this.removeListener(this.$back, 'resize');\n                this.addListener(this.$front, 'resize', 'updateContainerHeight');\n                if (this.$back) {\n                    this.$back.addClass('hidden');\n                }\n            },\n\n            onShowBack: function() {\n                this.showingSettings = true;\n                this.removeListener(this.$front, 'resize');\n                this.addListener(this.$back, 'resize', 'updateContainerHeight');\n                this.$front.addClass('hidden');\n\n                // Focus on the first input\n                setTimeout($.proxy(function() {\n                    this.$settingsForm.find(':focusable:first').trigger('focus');\n                }, this), 1);\n            },\n\n            updateContainerHeight: function() {\n                this.$container.height((this.showingSettings ? this.$back : this.$front).height());\n            },\n\n            getManagerRow: function() {\n                var $row = $(\n                    '<tr data-id=\"' + this.id + '\" data-name=\"' + Craft.escapeHtml(this.title) + '\">' +\n                    '<td class=\"widgetmanagerhud-icon\">' + this.getTypeInfo('iconSvg') + '</td>' +\n                    '<td>' + this.getManagerRowLabel() + '</td>' +\n                    '<td class=\"widgetmanagerhud-col-colspan-picker thin\"></td>' +\n                    '<td class=\"widgetmanagerhud-col-move thin\"><a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a></td>' +\n                    '<td class=\"thin\"><a class=\"delete icon\" title=\"' + Craft.t('app', 'Delete') + '\" role=\"button\"></a></td>' +\n                    '</tr>'\n                );\n\n                // Initialize the colspan picker\n                this.colspanPicker = new Craft.SlidePicker(this.getColspan(), {\n                    min: 1,\n                    max: () => {\n                        return window.dashboard.grid.totalCols;\n                    },\n                    step: 1,\n                    valueLabel: colspan => {\n                        return Craft.t('app', '{num, number} {num, plural, =1{column} other{columns}}', {\n                            num: colspan,\n                        });\n                    },\n                    onChange: colspan => {\n                        // Update the widget and grid\n                        this.setColspan(colspan);\n                        window.dashboard.grid.refreshCols(true);\n\n                        // Save the change\n                        let data = {\n                            id: this.id,\n                            colspan: colspan\n                        };\n\n                        Craft.postActionRequest('dashboard/change-widget-colspan', data, (response, textStatus) => {\n                            if (textStatus === 'success' && response.success) {\n                                Craft.cp.displayNotice(Craft.t('app', 'Widget saved.'));\n                            }\n                            else {\n                                Craft.cp.displayError(Craft.t('app', 'Couldn’t save widget.'));\n                            }\n                        });\n                    }\n                });\n\n                this.colspanPicker.$container.appendTo($row.find('> td.widgetmanagerhud-col-colspan-picker'));\n                window.dashboard.grid.on('refreshCols', () => {\n                    this.colspanPicker.refresh();\n                });\n\n                return $row;\n            },\n\n            getManagerRowLabel: function() {\n                var typeName = this.getTypeInfo('name');\n\n                return Craft.escapeHtml(this.title) + (this.title !== typeName ? ' <span class=\"light\">(' + typeName + ')</span>' : '');\n            },\n\n            destroy: function() {\n                delete window.dashboard.widgets[this.id];\n                this.$container.addClass('scaleout');\n                this.base();\n\n                setTimeout($.proxy(function() {\n                    window.dashboard.grid.removeItems(this.$gridItem);\n                    this.$gridItem.remove();\n                }, this), 200);\n            }\n        });\n})(jQuery);\n"]}
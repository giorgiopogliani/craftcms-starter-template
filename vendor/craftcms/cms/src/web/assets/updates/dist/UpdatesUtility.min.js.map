{"version":3,"sources":["updates/src/UpdatesUtility.js"],"names":["$","Craft","UpdatesUtility","Garnish","Base","extend","$body","totalAvailableUpdates","criticalUpdateAvailable","allowUpdates","installableUpdates","$graphic","$status","includeDetails","cp","checkForUpdates","info","this","updates","processUpdate","plugins","cms","length","remove","i","headingText","t","num","text","updateInfo","addClass","bind","isPlugin","releases","append","update","Update","installable","push","createUpdateForm","label","$form","method","getCsrfInput","type","value","name","handle","latestVersion","packageName","licenseSubmitAction","$releaseContainer","class","createPane","createHeading","createCta","$container","$header","$contents","$showAllLink","licenseHud","updatesPage","appendTo","initReleases","status","statusText","insertBefore","$buttonContainer","Release","releaseInfo","ctaUrl","createContainer","ctaText","href","FieldToggle","$headingContainer","critical","notesId","version","Math","floor","random","notes","data-target","find","maxInitialUpdateHeight","date","formatDate","createReleaseNotes","$notes","id","html","jQuery"],"mappings":"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","file":"UpdatesUtility.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.UpdatesUtility = Garnish.Base.extend(\n        {\n            $body: null,\n            totalAvailableUpdates: 0,\n            criticalUpdateAvailable: false,\n            allowUpdates: null,\n            installableUpdates: null,\n\n            init: function() {\n                this.$body = $('#content');\n\n                var $graphic = $('#graphic'),\n                    $status = $('#status');\n\n                this.installableUpdates = [];\n\n                var data = {\n                    forceRefresh: true,\n                    includeDetails: true\n                };\n\n                Craft.cp.checkForUpdates(true, true, function(info) {\n                    this.allowUpdates = info.allowUpdates;\n\n                    // Craft CMS update?\n                    if (info.updates.cms) {\n                        this.processUpdate(info.updates.cms, false);\n                    }\n\n                    // Plugin updates?\n                    if (info.updates.plugins && info.updates.plugins.length) {\n                        for (var i = 0; i < info.updates.plugins.length; i++) {\n                            this.processUpdate(info.updates.plugins[i], true);\n                        }\n                    }\n\n                    if (this.totalAvailableUpdates) {\n                        $graphic.remove();\n                        $status.remove();\n\n                        // Add the page title\n                        var headingText = Craft.t('app', '{num, number} {num, plural, =1{Available Update} other{Available Updates}}', {\n                            num: this.totalAvailableUpdates,\n                        });\n\n                        $('#header h1').text(headingText);\n\n                        if (this.allowUpdates && this.installableUpdates.length > 1) {\n                            this.createUpdateForm(Craft.t('app', 'Update all'), this.installableUpdates)\n                                .insertAfter($('#header > .flex:last'));\n                        }\n                    } else {\n                        $graphic.addClass('success');\n                        $status.text(Craft.t('app', 'Youâ€™re all up-to-date!'));\n                    }\n                }.bind(this));\n            },\n\n            processUpdate: function(updateInfo, isPlugin) {\n                if (!updateInfo.releases.length) {\n                    return;\n                }\n\n                this.totalAvailableUpdates++;\n\n                var update = new Update(this, updateInfo, isPlugin);\n                if (update.installable) {\n                    this.installableUpdates.push(update);\n                }\n            },\n\n            createUpdateForm: function(label, updates)\n            {\n                var $form = $('<form/>', {\n                    method: 'post'\n                });\n\n                $form.append(Craft.getCsrfInput());\n                $form.append($('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    value: 'updater'\n                }));\n                $form.append($('<input/>', {\n                    type: 'hidden',\n                    name: 'return',\n                    value: 'utilities/updates'\n                }));\n\n                for (var i = 0; i < updates.length; i++) {\n                    $form.append($('<input/>', {\n                        type: 'hidden',\n                        name: 'install['+updates[i].updateInfo.handle+']',\n                        value: updates[i].updateInfo.latestVersion\n                    }));\n                    $form.append($('<input/>', {\n                        type: 'hidden',\n                        name: 'packageNames['+updates[i].updateInfo.handle+']',\n                        value: updates[i].updateInfo.packageName\n                    }));\n                }\n\n                $form.append($('<button/>', {\n                    type: 'submit',\n                    text: label,\n                    class: 'btn submit'\n                }));\n\n                return $form;\n            }\n        }\n    );\n\n    var Update = Garnish.Base.extend(\n        {\n            updateInfo: null,\n            isPlugin: null,\n            installable: true,\n\n            $container: null,\n            $header: null,\n            $contents: null,\n            $releaseContainer: null,\n            $showAllLink: null,\n\n            licenseHud: null,\n            $licenseSubmitBtn: null,\n            licenseSubmitAction: null,\n\n            init: function(updatesPage, updateInfo, isPlugin) {\n                this.updatesPage = updatesPage;\n                this.updateInfo = updateInfo;\n                this.isPlugin = isPlugin;\n\n                this.createPane();\n                this.initReleases();\n                this.createHeading();\n                this.createCta();\n\n                // Any ineligible releases?\n                if (this.updateInfo.status !== 'eligible') {\n                    $('<blockquote class=\"note ineligible\"><p>'+this.updateInfo.statusText+'</p></blockquote>').insertBefore(this.$releaseContainer);\n\n                    if (this.updateInfo.status === 'expired' || this.updateInfo.latestVersion === null) {\n                        this.installable = false;\n                    }\n                }\n            },\n\n            createPane: function() {\n                this.$container = $('<div class=\"update\"/>').appendTo(this.updatesPage.$body);\n                this.$header = $('<div class=\"update-header\"/>').appendTo(this.$container);\n                this.$contents = $('<div class=\"readable\"/>').appendTo(this.$container);\n                this.$releaseContainer = $('<div class=\"releases\"/>').appendTo(this.$contents);\n            },\n\n            createHeading: function() {\n                $('<div class=\"readable left\"/>').appendTo(this.$header).append(\n                    $('<h1/>', {text: this.updateInfo.name})\n                );\n            },\n\n            createCta: function() {\n                if (!this.updatesPage.allowUpdates || !this.updateInfo.latestVersion || this.updateInfo.ctaUrl === false) {\n                    return;\n                }\n\n                var $buttonContainer = $('<div class=\"buttons right\"/>').appendTo(this.$header);\n                if (typeof this.updateInfo.ctaUrl !== 'undefined') {\n                    $('<a/>', {\n                        'class': 'btn submit',\n                        text: this.updateInfo.ctaText,\n                        href: this.updateInfo.ctaUrl\n                    }).appendTo($buttonContainer);\n                } else {\n                    this.updatesPage.createUpdateForm(this.updateInfo.ctaText, [this])\n                        .appendTo($buttonContainer);\n                }\n            },\n\n            initReleases: function() {\n                for (var i = 0; i < this.updateInfo.releases.length; i++) {\n                    new Release(this, this.updateInfo.releases[i]);\n                }\n            }\n        }\n    );\n\n    var Release = Garnish.Base.extend(\n        {\n            update: null,\n            releaseInfo: null,\n            notesId: null,\n\n            $container: null,\n            $headingContainer: null,\n\n            init: function(update, releaseInfo) {\n                this.update = update;\n                this.releaseInfo = releaseInfo;\n                this.notesId = 'notes-'+Math.floor(Math.random() * 1000000);\n\n                this.createContainer();\n                this.createHeading();\n\n                if (this.releaseInfo.notes) {\n                    this.createReleaseNotes();\n                    new Craft.FieldToggle(this.$headingContainer);\n                }\n            },\n\n            createContainer: function() {\n                this.$container = $('<div class=\"pane release\"/>').appendTo(this.update.$releaseContainer);\n\n                if (this.releaseInfo.critical) {\n                    this.$container.addClass('critical');\n                }\n            },\n\n            createHeading: function() {\n                if (this.releaseInfo.notes) {\n                    this.$headingContainer = $('<a/>', {'class': 'release-info fieldtoggle', 'data-target': this.notesId});\n                } else {\n                    this.$headingContainer = $('<div/>', {'class': 'release-info'});\n                }\n                this.$headingContainer.appendTo(this.$container);\n                $('<h2/>', {text: this.releaseInfo.version}).appendTo(this.$headingContainer);\n                if (this.releaseInfo.critical) {\n                    $('<strong/>', {'class': 'critical', text: Craft.t('app', 'Critical')}).appendTo(this.$headingContainer);\n                }\n                if (this.releaseInfo.date) {\n                    $('<span/>', {'class': 'date', text: Craft.formatDate(this.releaseInfo.date)}).appendTo(this.$headingContainer);\n                }\n            },\n\n            createReleaseNotes: function() {\n                var $notes = $('<div/>', {id: this.notesId})\n                    .appendTo(this.$container)\n                    .append($('<div/>', {'class': 'release-notes'}).html(this.releaseInfo.notes));\n\n                // Auto-expand if this is a critical release, or there are any tips/warnings in the release notes\n                if (this.releaseInfo.critical || $notes.find('blockquote').length) {\n                    this.$headingContainer.addClass('expanded');\n                } else {\n                    $notes.addClass('hidden');\n                }\n            }\n        },\n        {\n            maxInitialUpdateHeight: 500\n        }\n    );\n})(jQuery);\n"]}
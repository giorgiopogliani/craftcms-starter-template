{"version":3,"sources":["userpermissions/src/UserPermissions.js"],"names":["$","Craft","UserPermissions","Garnish","Base","extend","$wrapper","$selectAllBtn","$allCheckboxes","wrapper","this","addListener","updateSelectAllBtn","toggleSelectAll","ev","filter","trigger","preventDefault","$checkbox","currentTarget","prop","parent","find","$childrenCheckboxes","canSelectAll","text","t","length","userPermissions","each","jQuery"],"mappings":"CAAA,SAACA,GAEGC,MAAAC,gBAAAC,QAAAC,KAAAC,OACMH,CAEUI,SADZ,KAEIC,cAFJ,KAGIC,eAHJ,KAMaF,KAAAA,SAAWG,GACXF,KAAAA,SAAkBE,EAClBD,KAAAA,cAAmBR,EAAA,cAAAU,KAAAJ,UAEnBK,KAAAA,eAAiBJ,EAAAA,8CAAtBG,KAAAJ,UAEKM,KAAAA,YAALF,KAAAH,cAAA,QAAA,mBAZRG,KAAAC,YAAAD,KAAAF,eAAA,QAAA,kBAeIK,KAAiBD,sBACbC,gBAEO,SAAAC,GACEN,KAAAA,eACRE,KAAAF,eAAAO,OAAA,kBAAAC,QAAA,SAEEC,KAAHT,eAAAO,OAAA,YAAAC,QAAA,SAIIE,EAASD,kBAENA,eAAH,SAAAH,GACA,IAAAI,EAAAlB,EAAAc,EAAAK,eACH,GAAAD,EAAAE,KAAA,YAEUF,YAJPJ,EAAGG,iBAOYC,EAAYG,OAAA,MAAAC,KAAA,QAA3BJ,IACAK,EAAyBL,EAAzBG,OAAA,MAAAC,KAAA,2DAGAC,EAAoBR,KAAO,WAC3BQ,EAAyBH,KAAY,YAArC,IAGCR,EAALG,OAAA,YAAAC,QAAA,SA3CRO,EAAAH,KAAA,YAAA,IAgDiBb,KAAAA,sBAIRK,mBAAA,WApDTF,KAAAc,eAuDkBd,KAAAH,cAAWkB,KAAAxB,MAAAyB,EAAA,MAAA,eAxDjChB,KAAAH,cAAAkB,KAAAxB,MAAAyB,EAAA,MAAA,kBA+DAF,aAAA,WAlEJ,QAAAd,KAAAF,eAAAO,OAAA,kBAAAY,UAgEI,IAAIC,EAAkB5B,EAAE,qBAExBA,EAAE6B,KAAKD,GAAiB,WACpB,IAAI3B,MAAMC,gBAAgBQ,SAnElC,CAqEGoB","file":"UserPermissions.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.UserPermissions = Garnish.Base.extend(\n        {\n            $wrapper: null,\n            $selectAllBtn: null,\n            $allCheckboxes: null,\n\n            init: function(wrapper) {\n                this.$wrapper = wrapper;\n                this.$selectAllBtn = $('.select-all', this.$wrapper);\n                this.$allCheckboxes = $('input[type=checkbox]:not(.group-permission)', this.$wrapper);\n\n                this.addListener(this.$selectAllBtn, 'click', 'toggleSelectAll');\n                this.addListener(this.$allCheckboxes, 'click', 'toggleCheckbox');\n                this.updateSelectAllBtn();\n            },\n\n            toggleSelectAll: function(ev) {\n                if (this.canSelectAll()) {\n                    this.$allCheckboxes.filter(':not(:checked)').trigger('click');\n                } else {\n                    this.$allCheckboxes.filter(':checked').trigger('click');\n                }\n\n                ev.preventDefault();\n            },\n\n            toggleCheckbox: function(ev) {\n                let $checkbox = $(ev.currentTarget);\n                if ($checkbox.prop('disabled')) {\n                    ev.preventDefault();\n                    return;\n                }\n\n                let $uls = $checkbox.parent('li').find('> ul');\n                let $childrenCheckboxes = $checkbox.parent('li').find('> ul > li > input[type=checkbox]:not(.group-permission)');\n\n                if ($checkbox.prop('checked')) {\n                    $childrenCheckboxes.prop('disabled', false);\n                }\n                else {\n                    $childrenCheckboxes.filter(':checked').trigger('click');\n                    $childrenCheckboxes.prop('disabled', true);\n                }\n\n                this.updateSelectAllBtn();\n            },\n\n            updateSelectAllBtn: function() {\n                if (this.canSelectAll()) {\n                    this.$selectAllBtn.text(Craft.t('app', 'Select All'));\n                }\n                else {\n                    this.$selectAllBtn.text(Craft.t('app', 'Deselect All'));\n                }\n            },\n\n            canSelectAll: function() {\n                return !!this.$allCheckboxes.filter(':not(:checked)').length;\n            }\n        });\n\n    var userPermissions = $('.user-permissions');\n\n    $.each(userPermissions, function() {\n        new Craft.UserPermissions(this);\n    });\n})(jQuery);\n"]}
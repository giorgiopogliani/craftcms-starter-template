{"version":3,"sources":["fields/src/fields.js"],"names":["$","FieldsAdmin","Garnish","Base","extend","$groups","$selectedGroup","addListener","this","find","$groupSettingsBtn","settings","onOptionSelect","data","proxy","elem","renameSelectedGroup","deleteSelectedGroup","name","promptForGroupName","response","success","textStatus","href","errors","flattenErrors","getUrl","group","id","displayError","alert","Craft","t","join","cp","text","newName","postActionRequest","oldName","displayNotice","confirm","responseErrors","ready","attribute","hasOwnProperty","concat","$doc","jQuery"],"mappings":"CAAA,SAACA,GAEG,IAAAC,EAAAC,QAAAC,KAAAC,OACIH,CAEWI,QADX,KAEIC,eAFJ,KAKaD,KAAL,WACKC,KAAAA,QAAiBN,EAAKK,WACtBE,KAAAA,eAAcC,KAAiBH,QAAAI,KAAY,eAE5CC,KAAAA,YAAsBV,EAAA,gBAA1B,WAAA,eAEIU,IAAAA,EAA0BV,EAAA,qBAGlBW,EAASC,SACQC,EAArBA,KAAA,WAEAF,SAAAC,eAAAZ,EAAAc,OAAA,SAAAC,GAEaC,OADThB,EAAAe,GAAAF,KAAA,WAEI,IAAA,SACHL,KAAAQ,sBADG,MAEW,IAAA,SACNC,KAAAA,yBATjBT,QAkBAU,YAAYC,WAAhB,IAAID,EAAOV,KAAKW,mBAAmB,IAGvB,GAAGD,EAAA,CACDA,IAAAA,EAAAA,CADVA,KAAAA,GAMYE,MAASC,kBAAS,oBAAAR,EAAAb,EAAAc,OAAA,SAAAM,EAAAE,GACTC,GAAoB,YAA7BD,EAEKF,GAASI,EAAQH,QACJI,SAAAA,KAAcL,MAAQM,OAA3B,mBAAbN,EAAAO,MAAAC,SAGC,GAAAR,EAAAI,OAAA,CACQK,IAATL,EAAAhB,KAAAiB,cAAAL,EAAAI,QACHM,MAAAC,MAAAC,EAAA,MAAA,+BAAA,OAAAR,EAAAS,KAAA,YAGZF,MAAAG,GAAAL,iBAIarB,SAINK,oBAAO,WACH,IAAKP,EAAAA,KAAeO,eADjBsB,OAEDC,EAAAA,KAAAA,mBAAAA,GAGJC,GAAAA,GAAND,IAAwBE,EAAxB,CACQhB,IAAUT,EAAK,CACHe,GAACP,KAAbf,eAAsBO,KAAA,MACbP,KAAAA,GAIDkB,MAAMa,kBAAQZ,oBAAlBZ,EAAAb,EAAAc,OAAA,SAAAM,EAAAE,GACMS,GAAe,YAAPT,EAEb,GAAAF,EAAAC,QACQQ,KAATvB,eAAA6B,KAAAf,EAAAO,MAAAT,MACHa,MAAAG,GAAAK,cAAAR,MAAAC,EAAA,MAAA,wBAZT,GAAAZ,EAAAI,OAAA,CAeH,IAAAA,EAAAhB,KAAAiB,cAAAL,EAAAI,QAjFTM,MAAAC,MAAAC,EAAA,MAAA,+BAAA,OAAAR,EAAAS,KAAA,YAAAF,MAAAG,GAAAL,iBA0FuBrB,SAKPW,mBAAmB,SAAWmB,GACtBlB,OAAAA,OAASC,MAASW,EAAA,MAAA,uCAAAM,IAIlBP,oBAASF,WACZ,GAAAW,QAAAT,MAAAC,EAAA,MAAA,mEAAA,CACJ,IAAAnB,EAAA,CARLe,GAAApB,KAAAF,eAAAO,KAAA,OAaOkB,MAAAM,kBAAA,sBAAyBxB,EAAAb,EAAAc,OAAA,SAAAM,EAAAE,GACpC,YAAAA,IAZgBF,EAASC,QAcHoB,SAAAA,KAAgBV,MAAAL,OAAA,mBAGjCK,MAAAG,GAAAL,kBAGJrB,SArHbiB,cAAA,SAAAgB,GA4HaC,IAAblB,EAAmB,GAAnB,IAAA,IAAAmB,KAAAF,EA/HJA,EAAAG,eAAAD,KAuHoBnB,EAASA,EAAOqB,OAAOJ,EAAeE,KAG1C,OAAOnB,KAKnBtB,QAAQ4C,KAAKJ,OAAM,WACfX,MAAM9B,YAAc,IAAIA,KAhIhC,CAkIG8C","file":"fields.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    var FieldsAdmin = Garnish.Base.extend(\n        {\n            $groups: null,\n            $selectedGroup: null,\n\n            init: function() {\n                this.$groups = $('#groups');\n                this.$selectedGroup = this.$groups.find('a.sel:first');\n                this.addListener($('#newgroupbtn'), 'activate', 'addNewGroup');\n\n                var $groupSettingsBtn = $('#groupsettingsbtn');\n\n                if ($groupSettingsBtn.length) {\n                    var menuBtn = $groupSettingsBtn.data('menubtn');\n\n                    menuBtn.settings.onOptionSelect = $.proxy(function(elem) {\n                        var action = $(elem).data('action');\n\n                        switch (action) {\n                            case 'rename': {\n                                this.renameSelectedGroup();\n                                break;\n                            }\n                            case 'delete': {\n                                this.deleteSelectedGroup();\n                                break;\n                            }\n                        }\n                    }, this);\n                }\n            },\n\n            addNewGroup: function() {\n                var name = this.promptForGroupName('');\n\n                if (name) {\n                    var data = {\n                        name: name\n                    };\n\n                    Craft.postActionRequest('fields/save-group', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                location.href = Craft.getUrl('settings/fields/' + response.group.id);\n                            }\n                            else if (response.errors) {\n                                var errors = this.flattenErrors(response.errors);\n                                alert(Craft.t('app', 'Could not create the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                            }\n                            else {\n                                Craft.cp.displayError();\n                            }\n                        }\n                    }, this));\n                }\n            },\n\n            renameSelectedGroup: function() {\n                var oldName = this.$selectedGroup.text(),\n                    newName = this.promptForGroupName(oldName);\n\n                if (newName && newName !== oldName) {\n                    var data = {\n                        id: this.$selectedGroup.data('id'),\n                        name: newName\n                    };\n\n                    Craft.postActionRequest('fields/save-group', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                this.$selectedGroup.text(response.group.name);\n                                Craft.cp.displayNotice(Craft.t('app', 'Group renamed.'));\n                            }\n                            else if (response.errors) {\n                                var errors = this.flattenErrors(response.errors);\n                                alert(Craft.t('app', 'Could not rename the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                            }\n                            else {\n                                Craft.cp.displayError();\n                            }\n                        }\n                    }, this));\n                }\n            },\n\n            promptForGroupName: function(oldName) {\n                return prompt(Craft.t('app', 'What do you want to name the group?'), oldName);\n            },\n\n            deleteSelectedGroup: function() {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this group and all its fields?'))) {\n                    var data = {\n                        id: this.$selectedGroup.data('id')\n                    };\n\n                    Craft.postActionRequest('fields/delete-group', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                location.href = Craft.getUrl('settings/fields');\n                            }\n                            else {\n                                Craft.cp.displayError();\n                            }\n                        }\n                    }, this));\n                }\n            },\n\n            flattenErrors: function(responseErrors) {\n                var errors = [];\n\n                for (var attribute in responseErrors) {\n                    if (!responseErrors.hasOwnProperty(attribute)) {\n                        continue;\n                    }\n\n                    errors = errors.concat(responseErrors[attribute]);\n                }\n\n                return errors;\n            }\n        });\n\n\n    Garnish.$doc.ready(function() {\n        Craft.FieldsAdmin = new FieldsAdmin();\n    });\n})(jQuery);\n"]}
{"version":3,"sources":["matrixsettings/src/MatrixConfigurator.js"],"names":["$","Craft","MatrixConfigurator","Garnish","Base","extend","inputNamePrefix","fieldTypeSettingsNamespace","inputIdPrefix","placeholderKey","$blockTypesColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$blockTypeItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","blockTypes","blockTypeSort","totalNewBlockTypes","_cancelToken","_ignoreFailedRequest","fieldTypeInfo","children","$fieldsColumnContainer","$fieldItemsOuterContainer","setContainerHeight","this","_fieldTypeSettingsHtml","$container","$blockTypeItems","$item","newMatch","i","length","addListener","id","match","height","parseInt","axis","blockTypeSettingsModal","onSubmit","handle","applySettings","Math","max","maxColHeight","addFieldToSelectedBlockType","type","selectedBlockType","addBlockType","getBlockTypeSettingsModal","show","Promise","proxy","name","t","appendTo","BlockType","CancelToken","sendActionRequest","select","cancelToken","addField","addItems","namespace","response","BlockTypeSettingsModal","getFieldTypeSettingsHtml","resolve","reject","ui","cancel","$body","requestAnimationFrame","$nameInputContainer","$nameField","axios","source","$handleInputContainer","$handleField","token","data","then","catch","$buttons","cp","displayError","Modal","init","base","$form","$bod","handleGenerator","updateTarget","createTextField","$nameInput","$handleInput","val","find","shake","$nameErrorList","hide","instructions","class","onDelete","$handleErrorList","$deleteBtn","errors","text","startListening","HandleGenerator","$submitBtn","$cancelBtn","removeClass","onFormSubmit","ev","displayErrors","isMobileBrowser","listening","$errorList","trim","remove","addClass","confirm","stopListening","$fieldItemsContainer","configurator","setTimeout","$handleLabel","$settingsBtn","attr","$input","$fieldSettingsContainer","totalNewFields","$nameLabel","onSortChange","$nameHiddenInput","$handleHiddenInput","fields","selectedField","fieldSort","fieldSettings","deselect","trigger","$nameContainer","insertBefore","$fieldItems","Field","$fieldItem","DragSort","$items","initializedFieldTypeSettings","$translationSettingsContainer","$typeSettingsContainer","blockType","fieldTypeSettingsTemplates","showSettings","$requiredCheckbox","$widthInput","selectedFieldType","$typeSelect","width","widthSlider","updateNameLabel","html","updateHandleLabel","onTypeSelectChange","setFieldType","isNew","getFieldTypeSettings","getDefaultFieldSettings","footHtml","append","$settings","fresh","initUiElements","appendHeadHtml","headHtml","appendFootHtml","SlidePicker","settingsHtml","valueLabel","getParsedFieldTypeHtml","pct","insertAfter","noop","replace","RegExp","maxlength","createTextareaField","escapeHtml","$fieldset","updateRequiredIcon","prop","fieldTypeOptions","value","updateTranslationMethodSettings","createSelectField","detach","targetPrefix","$translationKeyFormatContainer","data-id","label","required","createCheckboxField","checked","push","options","isMultiSite","toggle","confirmDelete","selfDestruct","jQuery"],"mappings":"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","file":"MatrixConfigurator.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix configurator class\n     */\n    Craft.MatrixConfigurator = Garnish.Base.extend(\n        {\n            fieldTypeInfo: null,\n\n            inputNamePrefix: null,\n            fieldTypeSettingsNamespace: null,\n            inputIdPrefix: null,\n            placeholderKey: null,\n\n            $container: null,\n\n            $blockTypesColumnContainer: null,\n            $fieldsColumnContainer: null,\n            $fieldSettingsColumnContainer: null,\n\n            $blockTypeItemsOuterContainer: null,\n            $blockTypeItemsContainer: null,\n            $fieldItemsContainer: null,\n            $fieldSettingItemsContainer: null,\n\n            $newBlockTypeBtn: null,\n            $newFieldBtn: null,\n\n            blockTypes: null,\n            selectedBlockType: null,\n            blockTypeSort: null,\n            totalNewBlockTypes: 0,\n\n            _fieldTypeSettingsHtml: null,\n            _cancelToken: null,\n            _ignoreFailedRequest: false,\n\n            init: function(fieldTypeInfo, inputNamePrefix, fieldTypeSettingsNamespace, placeholderKey) {\n                this.fieldTypeInfo = fieldTypeInfo;\n                this.inputNamePrefix = inputNamePrefix;\n                this.fieldTypeSettingsNamespace = fieldTypeSettingsNamespace;\n                this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n                this.placeholderKey = placeholderKey;\n\n                this.$container = $('#' + this.inputIdPrefix + '-matrix-configurator:first .input:first');\n\n                this.$blockTypesColumnContainer = this.$container.children('.block-types').children();\n                this.$fieldsColumnContainer = this.$container.children('.mc-fields').children();\n                this.$fieldSettingsColumnContainer = this.$container.children('.mc-field-settings').children();\n\n                this.$blockTypeItemsOuterContainer = this.$blockTypesColumnContainer.children('.mc-col-items');\n                this.$blockTypeItemsContainer = this.$blockTypeItemsOuterContainer.children('.mc-blocktypes');\n                this.$fieldItemsOuterContainer = this.$fieldsColumnContainer.children('.mc-col-items');\n                this.$fieldSettingItemsContainer = this.$fieldSettingsColumnContainer.children('.mc-col-items');\n\n                this.setContainerHeight();\n\n                this.$newBlockTypeBtn = this.$blockTypeItemsOuterContainer.children('.btn');\n                this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n                this._fieldTypeSettingsHtml = {};\n\n                // Find the existing block types\n                this.blockTypes = {};\n\n                var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n                for (var i = 0; i < $blockTypeItems.length; i++) {\n                    var $item = $($blockTypeItems[i]),\n                        id = $item.data('id');\n\n                    this.blockTypes[id] = new BlockType(this, $item);\n\n                    // Is this a new block type?\n                    var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                    if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n                        this.totalNewBlockTypes = parseInt(newMatch[1]);\n                    }\n                }\n\n                this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n                    handle: '.move',\n                    axis: 'y'\n                });\n\n                this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n                this.addListener(this.$newFieldBtn, 'click', 'addFieldToSelectedBlockType');\n\n                this.addListener(this.$blockTypesColumnContainer, 'resize', 'setContainerHeight');\n                this.addListener(this.$fieldsColumnContainer, 'resize', 'setContainerHeight');\n                this.addListener(this.$fieldSettingsColumnContainer, 'resize', 'setContainerHeight');\n            },\n\n            setContainerHeight: function() {\n                setTimeout($.proxy(function() {\n                    var maxColHeight = Math.max(this.$blockTypesColumnContainer.height(), this.$fieldsColumnContainer.height(), this.$fieldSettingsColumnContainer.height(), 400);\n                    this.$container.height(maxColHeight);\n                }, this), 1);\n            },\n\n            getFieldTypeInfo: function(type) {\n                for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n                    if (this.fieldTypeInfo[i].type === type) {\n                        return this.fieldTypeInfo[i];\n                    }\n                }\n            },\n\n            addBlockType: function() {\n                this.getBlockTypeSettingsModal();\n\n                this.blockTypeSettingsModal.show();\n\n                this.blockTypeSettingsModal.onSubmit = $.proxy(function(name, handle) {\n                    this.totalNewBlockTypes++;\n                    var id = 'new' + this.totalNewBlockTypes;\n\n                    var $item = $(\n                        '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' + id + '\">' +\n                        '<div class=\"mci-name\">' +\n                        '<h4></h4>' +\n                        '<div class=\"smalltext light code\"></div>' +\n                        '</div>' +\n                        '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Settings') + '\"></a>' +\n                        '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                        '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][name]\">' +\n                        '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][handle]\">' +\n                        '</div>'\n                    ).appendTo(this.$blockTypeItemsContainer);\n\n                    this.blockTypes[id] = new BlockType(this, $item);\n                    this.blockTypes[id].applySettings(name, handle);\n                    this.blockTypes[id].select();\n                    this.blockTypes[id].addField();\n\n                    this.blockTypeSort.addItems($item);\n                }, this);\n            },\n\n            addFieldToSelectedBlockType: function() {\n                if (this.selectedBlockType) {\n                    this.selectedBlockType.addField();\n                }\n            },\n\n            getBlockTypeSettingsModal: function() {\n                if (!this.blockTypeSettingsModal) {\n                    this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n                }\n\n                return this.blockTypeSettingsModal;\n            },\n\n            getFieldTypeSettingsHtml: function(type) {\n                return new Promise((resolve, reject) => {\n                    if (typeof this._fieldTypeSettingsHtml[type] !== 'undefined') {\n                        resolve(this._fieldTypeSettingsHtml[type]);\n                        return;\n                    }\n\n                    // Cancel the current request\n                    if (this._cancelToken) {\n                        this._ignoreFailedRequest = true;\n                        this._cancelToken.cancel();\n                        Garnish.requestAnimationFrame(() => {\n                            this._ignoreFailedRequest = false;\n                        });\n                    }\n\n                    // Create a cancel token\n                    this._cancelToken = axios.CancelToken.source();\n\n                    Craft.sendActionRequest('POST', 'fields/render-settings', {\n                        cancelToken: this._cancelToken.token,\n                        data: {\n                            type: type,\n                            namespace: this.fieldTypeSettingsNamespace,\n                        }\n                    }).then(response => {\n                        this._fieldTypeSettingsHtml[type] = response.data;\n                        resolve(response.data);\n                    }).catch(() => {\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                        reject();\n                    });\n                });\n            },\n        });\n\n\n    /**\n     * Block type settings modal class\n     */\n    var BlockTypeSettingsModal = Garnish.Modal.extend(\n        {\n            init: function() {\n                this.base();\n\n                this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n                this.setContainer(this.$form);\n\n                this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n                let $nameField = Craft.ui.createTextField({\n                    label:  Craft.t('app', 'Name'),\n                    instructions: Craft.t('app', 'What this block type will be called in the control panel.'),\n                }).appendTo(this.$body);\n                let $nameInputContainer = $nameField.find('.input');\n                this.$nameInput = $nameInputContainer.find('.text');\n                this.$nameErrorList = $('<ul class=\"errors\"/>').appendTo($nameInputContainer).hide();\n                let $handleField =Craft.ui.createTextField({\n                    label: Craft.t('app', 'Handle'),\n                    instructions: Craft.t('app', 'How you’ll refer to this block type in the templates.'),\n                    class: 'code',\n                }).appendTo(this.$body);\n                let $handleInputContainer = $handleField.find('.input');\n                this.$handleInput = $handleInputContainer.find('.text');\n                this.$handleErrorList = $('<ul class=\"errors\"/>').appendTo($handleInputContainer).hide();\n                this.$deleteBtn = $('<a class=\"error left hidden\" style=\"line-height: 30px;\">' + Craft.t('app', 'Delete') + '</a>').appendTo(this.$body);\n                this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$body);\n                this.$cancelBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Cancel'),\n                }).appendTo(this.$buttons);\n                this.$submitBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                }).appendTo(this.$buttons);\n\n                this.handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n\n                this.addListener(this.$cancelBtn, 'click', 'hide');\n                this.addListener(this.$form, 'submit', 'onFormSubmit');\n                this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n            },\n\n            onFormSubmit: function(ev) {\n                ev.preventDefault();\n\n                // Prevent multi form submits with the return key\n                if (!this.visible) {\n                    return;\n                }\n\n                if (this.handleGenerator.listening) {\n                    // Give the handle a chance to catch up with the input\n                    this.handleGenerator.updateTarget();\n                }\n\n                // Basic validation\n                var name = Craft.trim(this.$nameInput.val()),\n                    handle = Craft.trim(this.$handleInput.val());\n\n                if (!name || !handle) {\n                    Garnish.shake(this.$form);\n                }\n                else {\n                    this.hide();\n                    this.onSubmit(name, handle);\n                }\n            },\n\n            onDeleteClick: function() {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this block type?'))) {\n                    this.hide();\n                    this.onDelete();\n                }\n            },\n\n            show: function(name, handle, errors) {\n                this.$nameInput.val(typeof name === 'string' ? name : '');\n                this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n                if (!handle) {\n                    this.handleGenerator.startListening();\n                }\n                else {\n                    this.handleGenerator.stopListening();\n                }\n\n                if (typeof name === 'undefined') {\n                    this.$deleteBtn.addClass('hidden');\n                    this.$submitBtn.text(Craft.t('app', 'Create'));\n                }\n                else {\n                    this.$deleteBtn.removeClass('hidden');\n                    this.$submitBtn.text(Craft.t('app', 'Save'));\n                }\n\n                this.displayErrors('name', (errors ? errors.name : null));\n                this.displayErrors('handle', (errors ? errors.handle : null));\n\n                if (!Garnish.isMobileBrowser()) {\n                    setTimeout($.proxy(function() {\n                        this.$nameInput.trigger('focus');\n                    }, this), 100);\n                }\n\n                this.base();\n            },\n\n            displayErrors: function(attr, errors) {\n                var $input = this['$' + attr + 'Input'],\n                    $errorList = this['$' + attr + 'ErrorList'];\n\n                $errorList.children().remove();\n\n                if (errors) {\n                    $input.addClass('error');\n                    $errorList.show();\n\n                    for (var i = 0; i < errors.length; i++) {\n                        $('<li/>').text(errors[i]).appendTo($errorList);\n                    }\n                }\n                else {\n                    $input.removeClass('error');\n                    $errorList.hide();\n                }\n            }\n        });\n\n\n    /**\n     * Block type class\n     */\n    var BlockType = Garnish.Base.extend(\n        {\n            configurator: null,\n            id: null,\n            errors: null,\n\n            inputNamePrefix: null,\n            inputIdPrefix: null,\n\n            $item: null,\n            $nameLabel: null,\n            $handleLabel: null,\n            $nameHiddenInput: null,\n            $handleHiddenInput: null,\n            $settingsBtn: null,\n            $fieldItemsContainer: null,\n            $fieldSettingsContainer: null,\n\n            fields: null,\n            selectedField: null,\n            fieldSort: null,\n            totalNewFields: 0,\n            fieldSettings: null,\n\n            init: function(configurator, $item) {\n                this.configurator = configurator;\n                this.$item = $item;\n                this.id = this.$item.data('id');\n                this.errors = this.$item.data('errors');\n\n                this.inputNamePrefix = this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n                this.inputIdPrefix = this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n                let $nameContainer = this.$item.children('.mci-name');\n                this.$nameLabel = $nameContainer.children('h4');\n                this.$handleLabel = $nameContainer.children('.smalltext');\n                this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n                this.$handleHiddenInput = this.$item.find('input[name$=\"[handle]\"]:first');\n                this.$settingsBtn = this.$item.find('.settings');\n\n                // Find the field items container if it exists, otherwise create it\n                this.$fieldItemsContainer = this.configurator.$fieldItemsOuterContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                if (!this.$fieldItemsContainer.length) {\n                    this.$fieldItemsContainer = $('<div data-id=\"' + this.id + '\"/>').insertBefore(this.configurator.$newFieldBtn);\n                }\n\n                // Find the field settings container if it exists, otherwise create it\n                this.$fieldSettingsContainer = this.configurator.$fieldSettingItemsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                if (!this.$fieldSettingsContainer.length) {\n                    this.$fieldSettingsContainer = $('<div data-id=\"' + this.id + '\"/>').appendTo(this.configurator.$fieldSettingItemsContainer);\n                }\n\n                // Find the existing fields\n                this.fields = {};\n\n                var $fieldItems = this.$fieldItemsContainer.children();\n\n                for (var i = 0; i < $fieldItems.length; i++) {\n                    var $fieldItem = $($fieldItems[i]),\n                        id = $fieldItem.data('id');\n\n                    this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n                    // Is this a new field?\n                    var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                    if (newMatch && newMatch[1] > this.totalNewFields) {\n                        this.totalNewFields = parseInt(newMatch[1]);\n                    }\n                }\n\n                this.addListener(this.$item, 'click', 'select');\n                this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n                this.fieldSort = new Garnish.DragSort($fieldItems, {\n                    handle: '.move',\n                    axis: 'y',\n                    onSortChange: $.proxy(function() {\n                        // Adjust the field setting containers to match the new sort order\n                        for (var i = 0; i < this.fieldSort.$items.length; i++) {\n                            var $item = $(this.fieldSort.$items[i]),\n                                id = $item.data('id'),\n                                field = this.fields[id];\n\n                            field.$fieldSettingsContainer.appendTo(this.$fieldSettingsContainer);\n                        }\n                    }, this)\n                });\n            },\n\n            select: function() {\n                if (this.configurator.selectedBlockType === this) {\n                    return;\n                }\n\n                if (this.configurator.selectedBlockType) {\n                    this.configurator.selectedBlockType.deselect();\n                }\n\n                this.configurator.$fieldsColumnContainer.removeClass('hidden').trigger('resize');\n                this.$fieldItemsContainer.removeClass('hidden');\n                this.$item.addClass('sel');\n                this.configurator.selectedBlockType = this;\n            },\n\n            deselect: function() {\n                this.$item.removeClass('sel');\n                this.configurator.$fieldsColumnContainer.addClass('hidden').trigger('resize');\n                this.$fieldItemsContainer.addClass('hidden');\n                this.$fieldSettingsContainer.addClass('hidden');\n                this.configurator.selectedBlockType = null;\n\n                if (this.selectedField) {\n                    this.selectedField.deselect();\n                }\n            },\n\n            showSettings: function() {\n                var blockTypeSettingsModal = this.configurator.getBlockTypeSettingsModal();\n                blockTypeSettingsModal.show(this.$nameHiddenInput.val(), this.$handleHiddenInput.val(), this.errors);\n                blockTypeSettingsModal.onSubmit = $.proxy(this, 'applySettings');\n                blockTypeSettingsModal.onDelete = $.proxy(this, 'selfDestruct');\n            },\n\n            applySettings: function(name, handle) {\n                if (this.errors) {\n                    this.errors = null;\n                    this.$settingsBtn.removeClass('error');\n                }\n\n                this.$nameLabel.text(name);\n                this.$handleLabel.text(handle);\n                this.$nameHiddenInput.val(name);\n                this.$handleHiddenInput.val(handle);\n            },\n\n            addField: function() {\n                this.totalNewFields++;\n                var id = 'new' + this.totalNewFields;\n\n                var $item = $(\n                    '<div class=\"matrixconfigitem mci-field\" data-id=\"' + id + '\">' +\n                    '<div class=\"mci-name\">' +\n                    '<h4><em class=\"light\">' + Craft.t('app', '(blank)') + '</em></h4>' +\n                    '<div class=\"smalltext light code\"></div>' +\n                    '</div>' +\n                    '<div class=\"actions\">' +\n                    '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo(this.$fieldItemsContainer);\n\n                this.fields[id] = new Field(this.configurator, this, $item);\n                this.fields[id].select();\n\n                this.fieldSort.addItems($item);\n            },\n\n            selfDestruct: function() {\n                this.deselect();\n                this.$item.remove();\n                this.$fieldItemsContainer.remove();\n                this.$fieldSettingsContainer.remove();\n\n                this.configurator.blockTypes[this.id] = null;\n                delete this.configurator.blockTypes[this.id];\n            }\n        });\n\n\n    var Field = Garnish.Base.extend(\n        {\n            configurator: null,\n            blockType: null,\n            id: null,\n\n            inputNamePrefix: null,\n            inputIdPrefix: null,\n\n            selectedFieldType: null,\n            initializedFieldTypeSettings: null,\n\n            $item: null,\n            $nameLabel: null,\n            $handleLabel: null,\n\n            $fieldSettingsContainer: null,\n            $nameInput: null,\n            $handleInput: null,\n            $requiredCheckbox: null,\n            $typeSelect: null,\n            $translationSettingsContainer: null,\n            $typeSettingsContainer: null,\n            $widthInput: null,\n            $deleteBtn: null,\n\n            init: function(configurator, blockType, $item) {\n                this.configurator = configurator;\n                this.blockType = blockType;\n                this.$item = $item;\n                this.id = this.$item.data('id');\n\n                this.inputNamePrefix = this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n                this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n                this.initializedFieldTypeSettings = {};\n                this.fieldTypeSettingsTemplates = {};\n\n                let $nameContainer = this.$item.children('.mci-name');\n                this.$nameLabel = $nameContainer.children('h4');\n                this.$handleLabel = $nameContainer.children('.smalltext');\n\n                // Find the field settings container if it exists, otherwise create it\n                this.$fieldSettingsContainer = this.blockType.$fieldSettingsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                var isNew = (!this.$fieldSettingsContainer.length);\n\n                if (isNew) {\n                    this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(this.blockType.$fieldSettingsContainer);\n                }\n\n                this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n                this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n                this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n                this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n                this.$translationSettingsContainer = $('#' + this.inputIdPrefix + '-translation-settings');\n                this.$typeSettingsContainer = this.$fieldSettingsContainer.children('.mc-fieldtype-settings:first');\n                this.$widthInput = $('#' + this.inputIdPrefix + '-width');\n                this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n                if (isNew) {\n                    this.setFieldType('craft\\\\fields\\\\PlainText');\n                }\n                else {\n                    this.selectedFieldType = this.$typeSelect.val();\n                    this.initializedFieldTypeSettings[this.selectedFieldType] = this.$typeSettingsContainer.children();\n                }\n\n                if (!this.$handleInput.val()) {\n                    new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n                }\n\n                this.addListener(this.$item, 'click', 'select');\n                this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n                this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n                this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n                this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n                this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n\n                let widthSlider = new Craft.SlidePicker(this.$widthInput.val() || 100, {\n                    min: 25,\n                    max: 100,\n                    step: 25,\n                    valueLabel: width => {\n                        return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                    },\n                    onChange: width => {\n                        this.$widthInput.val(width);\n                    }\n                });\n                widthSlider.$container.insertAfter($nameContainer);\n            },\n\n            select: function() {\n                if (this.blockType.selectedField === this) {\n                    return;\n                }\n\n                if (this.blockType.selectedField) {\n                    this.blockType.selectedField.deselect();\n                }\n\n                this.configurator.$fieldSettingsColumnContainer.removeClass('hidden').trigger('resize');\n                this.blockType.$fieldSettingsContainer.removeClass('hidden');\n                this.$fieldSettingsContainer.removeClass('hidden');\n                this.$item.addClass('sel');\n                this.blockType.selectedField = this;\n\n                if (!Garnish.isMobileBrowser()) {\n                    setTimeout($.proxy(function() {\n                        this.$nameInput.trigger('focus');\n                    }, this), 100);\n                }\n            },\n\n            deselect: function() {\n                this.$item.removeClass('sel');\n                this.configurator.$fieldSettingsColumnContainer.addClass('hidden').trigger('resize');\n                this.blockType.$fieldSettingsContainer.addClass('hidden');\n                this.$fieldSettingsContainer.addClass('hidden');\n                this.blockType.selectedField = null;\n            },\n\n            updateNameLabel: function() {\n                var val = this.$nameInput.val();\n                this.$nameLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>'));\n            },\n\n            updateHandleLabel: function() {\n                this.$handleLabel.html(Craft.escapeHtml(this.$handleInput.val()));\n            },\n\n            updateRequiredIcon: function() {\n                if (this.$requiredCheckbox.prop('checked')) {\n                    this.$nameLabel.addClass('mci-required');\n                }\n                else {\n                    this.$nameLabel.removeClass('mci-required');\n                }\n            },\n\n            onTypeSelectChange: function() {\n                this.setFieldType(this.$typeSelect.val());\n            },\n\n            setFieldType: function(type) {\n                // Update the Translation Method settings\n                Craft.updateTranslationMethodSettings(type, this.$translationSettingsContainer);\n\n                if (this.selectedFieldType) {\n                    this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n                }\n\n                this.selectedFieldType = type;\n                this.$typeSelect.val(type);\n\n                // Show a spinner\n                this.$typeSettingsContainer.html('<div class=\"zilch\"><div class=\"spinner\"></div></div>');\n\n                this.getFieldTypeSettings(type).then(({fresh, $settings, headHtml, footHtml}) => {\n                    this.$typeSettingsContainer.html('').append($settings);\n                    if (fresh) {\n                        Craft.initUiElements($settings);\n                        Craft.appendHeadHtml(headHtml);\n                        Craft.appendFootHtml(footHtml);\n                    }\n\n                    // In case Firefox was sleeping on the job\n                    this.$typeSettingsContainer.trigger('resize');\n                }).catch(() => {\n                    this.$typeSettingsContainer.html('');\n                });\n            },\n\n            getFieldTypeSettings: function(type) {\n                return new Promise((resolve, reject) => {\n                    if (typeof this.initializedFieldTypeSettings[type] !== 'undefined') {\n                        resolve({\n                            fresh: false,\n                            $settings: this.initializedFieldTypeSettings[type],\n                        });\n                        return;\n                    }\n\n                    this.configurator.getFieldTypeSettingsHtml(type).then(({settingsHtml, headHtml, footHtml}) => {\n                        settingsHtml = this.getParsedFieldTypeHtml(settingsHtml);\n                        headHtml = this.getParsedFieldTypeHtml(headHtml);\n                        footHtml = this.getParsedFieldTypeHtml(footHtml);\n                        let $settings = $('<div/>').html(settingsHtml);\n                        this.initializedFieldTypeSettings[type] = $settings;\n                        resolve({\n                            fresh: true,\n                            $settings: $settings,\n                            headHtml: headHtml,\n                            footHtml: footHtml,\n                        });\n                    }).catch($.noop);\n                });\n            },\n\n            getParsedFieldTypeHtml: function(html) {\n                if (typeof html === 'string') {\n                    html = html.replace(new RegExp(`__BLOCK_TYPE_${this.configurator.placeholderKey}__`, 'g'), this.blockType.id);\n                    html = html.replace(new RegExp(`__FIELD_${this.configurator.placeholderKey}__`, 'g'), this.id);\n                }\n                else {\n                    html = '';\n                }\n\n                return html;\n            },\n\n            getDefaultFieldSettings: function() {\n                var $container = $('<div/>', {\n                    'data-id': this.id\n                });\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Name'),\n                    id: this.inputIdPrefix + '-name',\n                    name: this.inputNamePrefix + '[name]'\n                }).appendTo($container);\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Handle'),\n                    id: this.inputIdPrefix + '-handle',\n                    'class': 'code',\n                    name: this.inputNamePrefix + '[handle]',\n                    maxlength: 64,\n                    required: true\n                }).appendTo($container);\n\n                Craft.ui.createTextareaField({\n                    label: Craft.t('app', 'Instructions'),\n                    id: this.inputIdPrefix + '-instructions',\n                    'class': 'nicetext',\n                    name: this.inputNamePrefix + '[instructions]'\n                }).appendTo($container);\n\n                let $fieldset = $('<fieldset/>').appendTo($container);\n\n                Craft.ui.createCheckboxField({\n                    label: Craft.t('app', 'This field is required'),\n                    id: this.inputIdPrefix + '-required',\n                    name: this.inputNamePrefix + '[required]'\n                }).appendTo($fieldset);\n\n                Craft.ui.createCheckboxField({\n                    label: Craft.t('app', 'Use this field’s values as search keywords'),\n                    id: this.inputIdPrefix + '-searchable',\n                    name: this.inputNamePrefix + '[searchable]',\n                    checked: false,\n                }).appendTo($fieldset);\n\n                var fieldTypeOptions = [];\n\n                for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n                    fieldTypeOptions.push({\n                        value: this.configurator.fieldTypeInfo[i].type,\n                        label: this.configurator.fieldTypeInfo[i].name\n                    });\n                }\n\n                Craft.ui.createSelectField({\n                    label: Craft.t('app', 'Field Type'),\n                    id: this.inputIdPrefix + '-type',\n                    name: this.inputNamePrefix + '[type]',\n                    options: fieldTypeOptions,\n                    value: 'craft\\\\fields\\\\PlainText'\n                }).appendTo($container);\n\n                if (Craft.isMultiSite) {\n                    var $translationSettingsContainer = $('<div/>', {\n                        id: this.inputIdPrefix + '-translation-settings'\n                    }).appendTo($container);\n\n                    Craft.ui.createSelectField({\n                        label: Craft.t('app', 'Translation Method'),\n                        id: this.inputIdPrefix + '-translation-method',\n                        name: this.inputNamePrefix + '[translationMethod]',\n                        options: [],\n                        value: 'none',\n                        toggle: true,\n                        targetPrefix: this.inputIdPrefix + '-translation-method-'\n                    }).appendTo($translationSettingsContainer);\n\n                    var $translationKeyFormatContainer = $('<div/>', {\n                        id: this.inputIdPrefix + '-translation-method-custom',\n                        'class': 'hidden'\n                    }).appendTo($translationSettingsContainer);\n\n                    Craft.ui.createTextField({\n                        label: Craft.t('app', 'Translation Key Format'),\n                        id: this.inputIdPrefix + '-translation-key-format',\n                        name: this.inputNamePrefix + '[translationKeyFormat]'\n                    }).appendTo($translationKeyFormatContainer);\n                }\n\n                $('<hr/>').appendTo($container);\n\n                $('<div/>', {\n                    'class': 'mc-fieldtype-settings'\n                }).appendTo($container);\n\n                $('<input/>', {\n                    type: 'hidden',\n                    id: this.inputIdPrefix + '-width',\n                    name: this.inputNamePrefix + '[width]',\n                    value: '100',\n                }).appendTo($container);\n\n                $('<hr/>').appendTo($container);\n\n                $('<a/>', {\n                    'class': 'error delete',\n                    text: Craft.t('app', 'Delete')\n                }).appendTo($container);\n\n                return $container;\n            },\n\n            confirmDelete: function() {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this field?'))) {\n                    this.selfDestruct();\n                }\n            },\n\n            selfDestruct: function() {\n                this.deselect();\n                this.$item.remove();\n                this.$fieldSettingsContainer.remove();\n\n                this.blockType.fields[this.id] = null;\n                delete this.blockType.fields[this.id];\n            }\n        });\n})(jQuery);\n"]}
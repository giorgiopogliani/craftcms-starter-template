{"version":3,"sources":["matrix/src/MatrixInput.js"],"names":["$","Craft","MatrixInput","Garnish","Base","extend","blockTypes","blockTypesByHandle","inputNamePrefix","showingAddBlockMenu","addBlockBtnGroupWidth","addBlockBtnContainerWidth","$blockContainer","$addBlockBtnContainer","$addBlockBtnGroup","$addBlockBtnGroupBtns","blockSort","totalNewBlocks","blockSelect","id","settings","i","collapsedBlocks","inputIdPrefix","this","formatInputId","maxBlocks","$container","setSettings","defaults","children","$addBlockMenuBtn","setNewBlockBtn","data","handle","getCollapsedBlockIds","blockType","DragSort","$blocks","$targetItem","hasClass","axis","filter","proxy","getSelectedItems","resetItemOrder","Select","magnetStrength","helperLagBase","helperOpacity","onSortChange","blockId","multi","vertical","checkboxMode","length","MatrixBlock","$block","newMatch","match","block","inArray","option","collapse","updateAddBlockBtn","ev","addListener","type","ready","MenuBtn","addBlock","width","requestAnimationFrame","addClass","removeClass","navigator","userAgent","indexOf","css","$items","canAddMoreBlocks","$actionMenu","eq","find","parent","getBlockTypeByHandle","$insertBefore","autofocus","staticBlocks","html","name","t","getParsedBlockHtml","getHiddenBlockCss","velocity","draftEditor","addItems","pause","appendTo","$fieldsContainer","bodyHtml","footHtml","trigger","opacity","margin-bottom","collapseSelectedBlocks","callOnSelectedBlocks","append","initUiElements","expandSelectedBlocks","disableSelectedBlocks","scrollContainerToElement","first","$selectedItems","window","resume","placeholderKey","collapsedBlockStorageKey","deleteSelectedBlocks","setCollapsedBlockIds","fn","localStorage","push","forgetCollapsedBlockId","collapsedBlocksIndex","matrix","$previewContainer","systemUid","collapsed","filterArray","split","isNew","$menuBtn","ids","join","menuBtn","onOptionSelect","menu","Storage","splice","preventDefault","$collapsedInput","init","$titlebar","previewHtml","$fields","$inputs","$field","inputPreviewText","substr","$maybeLightswitchContainer","prev","next","value","on","_handleTitleBarClick","toggle","hide","j","rememberCollapsedBlockId","$input","val","text","getText","getInputPostVal","Array","collapsedContainerHeight","expandedContainerHeight","displayValue","height","show","setTimeout","$prev","insertAfter","$next","onMenuOptionSelect","batchAction","totalSelected","duration","$option","disable","enable","moveUp","moveDown","insertBefore","confirm","isSelected","selfDestruct","expand","enableSelectedBlocks","remove","jQuery"],"mappings":"CAAA,SAACA,GAMGC,MAAMC,YAAcC,QAAQC,KAAKC,OAC7B,CADEH,GAAAA,KACFI,WAAA,KAEIA,mBAFJ,KAGIC,gBAHJ,KAIIC,cAJJ,KAOIC,qBAPJ,EAQIC,sBARJ,KASIC,0BATJ,KAYIC,WAAiB,KACjBC,gBAAuB,KACvBC,sBAdJ,KAeIC,kBAfJ,KAiBIC,sBAjBJ,KAmBIC,UAnBJ,KAqBUC,YAAaZ,KACVa,eAAL,EAEKX,KAAAA,SAALW,EAAuBX,EAAAA,EAAvBY,GAsBA,IAAIC,EAQAC,IA7BCC,KAAAA,GAALJ,EAFAK,KAAKlB,WAAaA,EAKdkB,KAAOJ,gBAAXZ,EACYgB,KAAGD,cAAAtB,MAAAwB,cAAAD,KAAAhB,iBACd,iBAAAY,IADGA,EAAW,CAACM,UAAWN,IAItBO,KAALC,YAA0BR,EAA1BnB,MAAAC,YAAA2B,UAEKhB,KAAAA,WAALb,EAA6B,IAAK2B,KAAAA,IAC7Bb,KAAAA,gBAAyBD,KAAAA,WAAAA,SAAsBiB,WAC/Cf,KAAAA,sBAA6BD,KAAAA,WAAkBgB,SAAS,YACxDC,KAAAA,kBAAwBlB,KAAAA,sBAA+BiB,SAA5D,aAEKH,KAALZ,sBAAAS,KAAAV,kBAAAgB,SAAA,QAEKE,KAAAA,iBAALR,KAAAX,sBAAAiB,SAAA,YAIAN,KAAAG,WAAAM,KAAA,SAAAT,MAEAA,KAAaQ,iBAEJzB,KAAAA,mBAA6B2B,GAIlCZ,EAAe,EAAGrB,EAAAA,KAAMC,WAAYiC,OAAAA,IAAAA,CAExC,IAAiBC,EAAYC,KAAAA,WAAZhB,GACLG,KAAAjB,mBADmC6B,EAAAF,QAAAE,EAIvC,IAAAE,EAAAd,KAAAZ,gBAAAkB,WACSd,EAAUuB,MAAYC,YAA/BL,uBAuBR,IAvBQX,KAGKR,UAAA,IAAAb,QAAAkC,SAAAC,EAAA,CACMJ,OAAKlB,qBACfyB,KAAA,IAVsCC,OAAA1C,EAAA2C,OAAA,WAa3B,OAb2BnB,KAAAR,UAAAuB,YAAAC,SAAA,OAAAhB,KAAAN,YAAA0B,mBAiBtBC,KAAAA,UAAjBN,cAjBRf,MAqBKN,kBAA0B4B,EAAsCC,eAAA,EAEvDC,cAFuD,IAGzDC,cAAA,GACIC,aAAElD,EAAA2C,OAAA,WAJlBnB,KAAAN,YAAA2B,mBAHOrB,QAYC2B,KAAOjC,YAAe,IAD1Bf,QAGA2C,OAAAtB,KAAAZ,gBAAA0B,EAAA,CAVAc,OAAO,EAWKC,UAAWF,EATvBjB,OAAQ,2BAWIoB,cAAY,IAPvBjC,EAAI,EAAGA,EAAIiB,EAAQiB,OAAQlC,IAAK,CAWrB,IAAImC,EAAAA,EAAJlB,EAAsBmB,IAT9BN,EAAUM,EAAOxB,KAAK,MAazByB,EAAA,iBAAAP,GAAAA,EAAAQ,MAAA,YARGD,GAAYA,EAAS,GAAKlC,KAAKP,iBAWtBO,KAAKT,eAAAA,SAAuB2C,EAAS,KAAtD,IAAAE,EAAA,IAAAJ,EAAAhC,KAAAiC,GAOwBzD,EAAE2C,KAAuB,IAAjB3C,EAAA6D,QAASC,GAAQF,EAAAzC,GAAAG,IACxBwC,EAAFC,WAKlBC,KAAAA,YAALxC,KAAAT,sBAAA,SAAA,SAAAkD,GAEKC,IAAYC,EAAKxC,EAAAA,EAAAA,QAAYM,KAAlC,QACamC,KAAMpE,SAAQmE,MAK/BnC,IAAgB7B,QAAAkE,QAAW7C,KAAAO,iBACvB,CACUrB,eAAuBV,EAAA2C,OAAA,SAAAmB,GACxBpD,IAAAA,EAAwBV,EAAA8D,GAAKhD,KAAAA,QAf1BU,KAAK8C,SAASH,KAiBZzD,QAKdc,KAAAwC,oBAhBAxC,KAAK0C,YAAY1C,KAAKG,WAAY,SAAU,kBAiBnChB,QAAAA,KAAAA,MAAAA,EAAAA,MAALa,KAAoC,mBAE3BA,KAAKf,QAAAA,cAGNuB,eAAKvB,YAGRe,KAAAd,wBACQD,KAAAA,sBAAqBe,KAAAV,kBAAAyD,QAErBzD,KAAAA,yBAQGX,KAAQqE,6BAA8BhD,KAAAb,0BAAWa,KAAAX,sBAAA0D,WACxCzD,KAAAA,sBAAsBU,KAA3Bb,0BADJa,KAAAf,sBAHJe,KAAAV,kBAAA2D,SAAA,UAOHjD,KAAAO,iBAAA2C,YAAA,UACJlD,KAAAf,qBAAA,GAKKe,KAAAf,sBACNe,KAAmBO,iBAAKnB,SAAgBkB,UApKxDN,KAAAV,kBAAA4D,YAAA,UAuKuBlD,KAAAf,qBAAW,GAGG,IAAzBkE,UAAyBC,UAAAC,QAAA,WACFH,QAAAA,sBAAvB1E,EAAA2C,OAAA,WACsB+B,KAAtB5D,kBAAAgE,IAAA,UAAA,KAEqB5D,QAAY6D,sBAAoB/E,EAAA2C,OAAA,WACxBoC,KAAU1D,kBAAnCyD,IAAA,UAAA,MApBetD,SAsBJA,UAdvBwD,iBAAkB,WAuBJ,OAAUxD,KAAKN,WAAY6D,KAAOxB,gBAAazB,WAAAyB,OAAA/B,KAAAE,WAGjDsC,kBAAW,WACPJ,IAAMqB,EAAAA,EAEb,GAAAzD,KAAAwD,mBAKKA,IAJTxD,KAAAV,kBAAA4D,YAAA,YAjMTlD,KAAAO,iBAAA2C,YAAA,YAqMkBM,EAAAA,EAAL3D,EAAyBG,KAAAN,YAAA6D,OAAAxB,OAAAlC,KAC1BuC,EAAApC,KAAAN,YAAA6D,OAAAG,GAAA7D,GAAAY,KAAA,WAGJ2B,EAAAqB,YAAAE,KAAA,sBAAAC,SAAAV,YAAA,iBAfI,IAHAlD,KAAKV,kBAyBWN,SAAgB,YAxBhCgB,KAAKO,iBAyBWvB,SAAgB,YAvB3Ba,EAyBI,EAAAA,EAAKgE,KAAAA,YAAAA,OAAL9B,OAAqClC,KAxB1CuC,EAAQpC,KAAKN,YAAY6D,OAAOG,GAAG7D,GAAGY,KAAK,WAGvC2B,EAAMqB,YAAYE,KAAK,sBAAsBC,SAASX,SAAS,aAM/EH,SAAU,SAASH,EAAMmB,EAAeC,GACpC,GAAK/D,KAAKwD,mBAAV,CAQAxD,KAAAP,iBAuBUG,IAAAA,EAASoE,MAAAA,KAAnBvE,eAvBIwE,EAAQ,uCACQtE,iBAAkBgD,qCACvB3C,KAAKhB,wCAyBwCW,sCAxB7CK,KAAKhB,2BAA2BW,oBAAqBgD,sCACrD3C,KAAKhB,2BAA2BW,kFAElCK,KAAK6D,qBAAqBlB,GAAMuB,yFA4B5BzF,MAAA0F,EAAA,MAAA,kFACuGD,MAAAA,EAAAA,MAAAA,oEADhHzF,MAAA0F,EAAA,MAAA,kJAIK1F,MAAA0F,EAAA,MAAA,+FAAT1F,MAAA0F,EAAA,MAAA,iFAEH1F,MAAA0F,EAAA,MAAA,+FAtBwD1F,MAAM0F,EAAE,MAAO,4EAwB/D1F,MAAA0F,EAAA,MAAA,+EAtBgC1F,MAAM0F,EAAE,MAAO,qCAsBxD,IAAAnE,KAAAJ,SAAAoE,aAAA,CAMcC,GAEd,iIAEIxF,MAAA0F,EAAA,MAAA,yFAMC,IAAA,IAAAtE,EAAA,EAAAA,EAAAG,KAAAlB,WAAAiD,OAAAlC,IAAA,CACe,IAAAe,EAAKxB,KAArBN,WAAAe,GACHoE,GAAA,kEAzB8CrD,EAAUF,WAAWjC,MAAM0F,EAAE,MAAO,mBAAoB,CAACxB,KAAM/B,EAAUsD,kBA6B5GD,GAAQG,gBAQpBH,GAAA,iDACgBI,MAAkBpC,EAAAA,MAASqC,mDAIhChB,IAAIrB,EAAAzD,EAAAyF,GAGPjC,OAAYuC,aACX/E,OAAUgF,YAAfC,QAIQzB,EACAf,EAAO8B,aAAcD,GA3B7B7B,EAAOyC,SAAS1E,KAAKZ,iBAGzB,IAAIuF,EAAmBnG,EAAE,yBAAyBkG,SAASzC,GACvD2C,EAAW5E,KAAKoE,mBAAmBpE,KAAKjB,mBAAmB4D,GAAMiC,SAAUjF,GA+B7DkF,EAACN,KAAaH,mBAAApE,KAAAjB,mBAAA4D,GAAAkC,SAAAlF,GAEvBnB,EAAAoG,GAAAF,SAAAC,GAvBT3E,KAAA8E,QAAA,aAAA,CAtRR7C,OAAAA,IAqTgBA,EAAYnD,IAAAA,KAALuF,kBAAPpC,IAAAqC,SAAA,CACHS,QAAA,EACJC,gBAAA,IAvTT,OAAAxG,EAAA2C,OAAA,WA0TI8D,EAAsB3B,IAAE,gBAAW,IAC1B4B,QAAAA,KAAqBC,OAAAN,GA3TlCpG,MAAA2G,eAAAT,GA8TIU,IAAoBrD,EAAEhC,KAAWiC,GACxBiD,KAAAA,UAAqBV,SAA1BvC,GA/TRjC,KAAAN,YAAA8E,SAAAvC,GAkUIqD,KAAqB9C,oBAlUzB7D,QAAAqE,uBAAA,iBAsUqC,IAAXe,GAAWA,KAtUrCpF,QAAA4G,yBAAAtD,GA2UaiD,EAAqBvB,KAAA,2BAA1B6B,QAAAV,QAAA,UAKqBW,OAAAA,aACpBC,OAAAnB,YAAAoB,cAIM3F,SAAP6D,qBAAA,SAAAnD,GArVR,IAAA,IAAAb,EAAA,EAAAA,EAAAG,KAAAlB,WAAAiD,OAAAlC,IA2VIuE,GAAoBpE,KAAAlB,WAAea,GAAfe,SAAmBA,EAC/B,OAAgBV,KAAUlB,WAAAe,IA5VtCoF,uBAAA,WA2TQjF,KAAKkF,qBAAqB,aA2C7BG,qBAAA,WAvCGrF,KAAKkF,qBAAqB,WA2C1BU,sBADM,WAEG5F,KAFHkF,qBAAA,YAMVW,qBAA0B,WAE1BlF,KAAAA,qBAAiC,WAC7BmF,qBAGK,WACM9F,KAAPkF,qBAAA,iBAIRa,qBAAsB,SAAcC,GAChCC,IAAaxH,IAAMC,EAAAA,EAAAA,EAANsB,KAAkB6F,YAAAA,eAA+B9D,OAAMlC,IAnB5EG,KAAAN,YAAA+F,eAAA/B,GAAA7D,GAAAY,KAAA,SAAAuF,MApBI3B,kBAAmB,SAASpC,GA8CdI,MAAQ,CACVvC,QAAgBoG,EACVxH,cAAYqH,EAAAA,gBAK9BI,mBAAwB,SAAAlC,EAAatE,GAC7B,MAAmB,iBAAnBsE,EACmBA,EAAGxF,QAAMC,IAAAA,OAAYiC,WAAAA,KAAAA,SAAxCiF,mBAAA,KAAAjG,GAGIyG,IAIPlG,gBACJ,OAAAF,KAAAJ,SAAAM,YAMDmG,CACAlG,SAFJ,CAGeyF,eAHf,KAIIjB,UAJJ,KAKI2B,cALJ,GASWT,yBATX,SAAApH,MAAA8H,UAAA,+BAYIC,qBAZJ,WAcU,MAA6B,iBAA7BP,aAA6BxH,MAAAC,YAAAmH,0BAC/BpH,MAAAgI,YAAAR,aAAAxH,MAAAC,YAAAmH,0BAAAa,MAAA,MAGKJ,IAMAK,qBAAsB,SAAYhH,GAEnCiH,aAAgBzG,MAAAA,YAAgB0F,0BAApCgB,EAAAC,KAAA,MAKAC,yBAAsBC,SAAmB7F,GAEjC8F,GAAsB,oBAAdC,QAAc,CACrB/G,IAAW8C,EAAhBxE,MAAAC,YAAAiC,wBACiD,IAAxCR,EAAAA,QAAgB,GAAAR,EAAAG,KAChB2D,EAAiByC,KAAAvG,GACnBlB,MAAAC,YAAAqH,qBAAAjG,MAIHqG,uBAAsB,SAAAxG,GACnB,GAAA,oBAAAuH,QAAA,CACEzD,IAAAA,EAAiBhF,MAAAC,YAAAiC,uBACzByF,EAAA5H,EAAA6D,QAAA,GAAA1C,EAAAG,IAEyB,IAAdsG,IACIlD,EAAYiE,OAA5Bf,EAAA,GAGJ3H,MAAAC,YAAAqH,qBAAAjG,QAMI2C,IAAAA,EAAG2E,QAAHxI,KAAAC,OACA,CAFJwH,OAAA,KArDJlG,WAAY,KA0DHuC,UAAY,KA5DzBiC,iBAAA,KA+DY2B,kBAAW,KACX7C,YAAJ,KACI4D,gBAAA,KAGAV,MAAKpE,KACR5C,GAAA,KAGG6G,WAAE,EAEFc,KAAA,SAAAjB,EAAAlG,GACHH,KAAAqG,OAAAA,EA3DDrG,KAAKG,WAAaA,EA6DbA,KAALoH,UAAyBpH,EAAzBG,SAAA,aAEIkH,KAAWlB,kBAAftG,KAAAuH,UAAAjH,SAAA,YACImH,KAAU9C,iBAAKA,EAALrE,SAAiCA,WAErCN,KAAVG,WAAoBsH,KAAQ1F,QAA5B/B,MAEQ0H,KAAO/H,GAAGgI,KAAOrH,WAASG,KAAhB,MACVmH,KAAAA,OAAmB5H,KAFvBL,IAAA,iBAAAK,KAAAL,IAAA,QAAAK,KAAAL,GAAAkI,OAAA,EAAA,GAIK,IAAKjB,EAAUc,KAAQ3F,WAA5B4B,KAAyC,0BAC3BoD,EAAKW,IAAO/I,QAAtBkE,QAAA+D,GA3DR5G,KAAKyD,YAAcsD,EAAQE,KAAK9G,WA+DhB2H,EAAAA,KAAAA,SAAAA,eAAoClE,EAAAA,MAASA,KAAjD,sBAEIkE,EAAAA,KAAAA,GAAAA,OAAAA,KAIA9H,KAAAG,WAAA8C,SAAA,UACHjD,KAAAG,WAAA4H,KAAA,gBAAAhG,OA/DL/B,KAAKyD,YAAYE,KAAK,+BAA+BC,SAASV,YAAY,UAmErElD,KAAAyD,YAAAE,KAAA,+BAAAC,SAAAX,SAAA,UAEJjD,KAAAG,WAAA6H,KAAA,gBAAAjG,OAhED/B,KAAKyD,YAAYE,KAAK,iCAAiCC,SAASV,YAAY,UAmEhE+E,KAAMnB,YAAdnD,KAAA,iCAAAC,SAAAX,SAAA,YAGAgF,EAAOhB,KAAAiB,GAAA,OAAA,KACCzJ,KAAK0B,WAAL+C,YAAR,YAIQ0E,QAAAA,QAAoB5H,KAApBG,WAAA,mBACHH,KAAAuC,WAGJvC,KAAAmI,qBAAA,SAAA1F,GACJA,EAAA2E,iBACJpH,KAAAoI,UAGGZ,KAAW9E,YAAK8E,KAAWD,UAAG,YAAqBvH,KAAM4H,uBA9DrEQ,OAAQ,WAkEC9B,KAAAA,UAEA3B,KAAAA,SAGQ3E,KAAAuC,UAAA,IAETA,SAAKpC,SAAWmE,GAAgB,IAAEtE,KAAAwG,UAAF,CAI3B7B,KAAAA,WAAiB0D,SAAtB,aA1DJ,IA2D+B,IAAEb,EAAA,GAA7BC,EAAAzH,KAAA2E,iBAAArE,WAAAA,WA3DKT,EAAI,EAAGA,EAAI4H,EAAQ1F,OAAQlC,IAAK,CAKrC,IAyDSsB,IACTuG,EADelJ,EAAAiJ,EAAW5H,IACJS,SAAA,UAAAqD,KAAiCC,gDACvDgE,EAAsB,GA3DbU,EAAI,EAAGA,EAAIZ,EAAQ3F,OAAQuG,IAAK,CA+D5B,IACKC,EADLC,EAAAhK,EAAAkJ,EAAAY,IAIHjB,GAAAA,EAAiBrG,SAAA,SAAA,CAClBqG,IAALS,EAAyBU,EAAgC5E,SAAKyC,SAGzDgB,GAAgBoB,EAArBzH,SAAA,iBACH8G,EAAA9G,SAAA,OAAAwH,EAAAxH,SAAA,SACJ8G,EAAA9G,SAAA,OAAAwH,EAAAxH,SAAA,OAED,SAIqBiH,EAAAO,EAAAE,YA9DTT,EAAQxJ,MAAMkK,QAAQhK,QAAQiK,gBAAgBJ,IAqE1ClE,aAAhBuE,QAEIC,EAAwBb,EAAQ9H,KAAAA,OAGhC4I,IACed,EAAKtD,MAAAA,KAAiBrB,MAEOsE,IAA4BoB,GAAAA,MAC1CD,GAAAA,GAKvBnB,IACPJ,IAAsBA,EAAA,mBAA0CtE,IAAAA,GAK1DyD,KAANL,kBAAerC,KAAmBuD,GAE9BpB,KAAAA,iBAAyB/D,SAAQ,QA/DzCrC,KAAKG,WAAWmE,SAAS,QAkEjBxE,GACMpB,KAAAA,iBAAYqH,SAAqBjG,UAAAA,CAAAA,SAAvC,SACHE,KAAAG,WAAAmE,SAAA,CAAA2E,OAAA,IAAA,UAGKtC,KAAOL,kBAAA4C,OACPxK,KAANiG,iBAAkBwB,OAEbnG,KAAKqH,WAAAA,IAAiB,CAAA4B,OAAA,MA9D/BE,WAAW3K,EAAE2C,OAAM,WAkEnBnB,KAAiByD,YAAjBE,KAAA,iCAAAC,SAAAX,SAAA,UAlNRjD,KAAAyD,YAAAE,KAAA,+BAAAC,SAAAV,YAAA,YAqNalD,MAAW,KAIHmB,KAAMwF,MAKnB3G,KAAAqH,gBAKgBnE,KAAAA,gBAAhBuF,IAAA,KAnORzI,KAAAqH,gBAAA7I,EAAA,8BAAAwB,KAAAqG,OAAArH,gBAAA,YAAAgB,KAAAL,GAAA,6BAAA+E,SAAA1E,KAAAG,YA0NiBsD,MAAYE,YAAK4E,yBAAgC3E,KAAtDjE,IAcMK,KAHVwG,WAAA,IAOI4C,OAAQ,WAtEZ,GAAKpJ,KAAKwG,UAAV,CA0ECxG,KAAAG,WAAA+C,YAAA,aAGKlD,KAAA2E,iBAAWL,SAAA,QACRtE,KAAGG,WAAKA,SAAgB,QACvB4B,IAAAA,EAAQ/B,KAAAG,WAAA8I,SACT9I,KAAAA,WAAWkJ,OAAYC,QACvBjD,KAAO3G,iBAAY2B,OAC3B,IAAA0H,EAAA/I,KAAAG,WAAA8I,SAxPTD,EAAAhJ,KAAA2E,iBAAArB,IAAA,YAAA,QAwQgB,GAbZiG,KAAAA,WAAoBN,OAAS3G,GACrBkH,KAAW7E,iBAAgBjF,OAAAA,SAAY+J,SAAgB,CAAxCC,SAAkDrD,OAAO3G,QAAZsJ,IAC5DW,KAAWxJ,WADfmE,SAAA,CAAA2E,OAAAF,GAAA,OAAAvK,EAAA2C,OAAA,WArEInB,KAAKsG,kBAAkBrC,KAAK,IAwExB0F,KAAQlJ,WAAhBwI,OAAA,UACSjJ,OACGwJ,WAAJhL,EAAiB2C,OAAA,WACRkF,KAAL5C,YAAYwB,KAAAA,iCAAZrB,SAAAV,YAAA,UAEClD,KAAAyD,YAAAE,KAAA,+BAAAC,SAAAX,SAAA,YACIV,MAAAA,MAGTvC,KAAA2G,OAAA,oBAAAO,QAAA,CACH,IAAApH,EAAArB,MAAAC,YAAAiC,uBAtEGyF,EAAuB5H,EAAE6D,QAAQ,GAAKrC,KAAKL,GAAIG,IAwEpC,IAAAsG,IACPoD,EAAarC,OAAAf,EAAA,GACRC,MAAOhB,YAAAA,qBAAZvF,IAlEPE,KAAK2G,MAGD3G,KAAKqH,iBAwELrH,KAALqH,gBAAAoB,IAAA,IAHIhK,MAAAC,YAAAyH,uBAAAnG,KAAAL,IAKIK,KAAKqG,WAAOf,IAIfsE,QAAA,WAtET5J,KAAKG,WAAWG,SAAS,kCAAkCmI,IAAI,IAwEvDzI,KAAAG,WAAA8C,SAAA,YArERkG,WAAW3K,EAAE2C,OAAM,WAwEVnB,KAALyD,YAAAE,KAAA,gCAAAC,SAAAX,SAAA,UAAejD,KAAAyD,YAAAE,KAAA,+BAAAC,SAAAV,YAAA,YACPsG,MAAAA,KAAJxJ,KAGKuC,UAAA,IAGJsH,OAAA,WAtET7J,KAAKG,WAAWG,SAAS,kCAAkCmI,IAAI,KAwEvDzI,KAAAG,WAAA+C,YAAA,YArERiG,WAAW3K,EAAE2C,OAAM,WAwEVnB,KAALyD,YAAAE,KAAA,gCAAAC,SAAAV,YAAA,UAAelD,KAAAyD,YAAAE,KAAA,+BAAAC,SAAAX,SAAA,YACN6G,MAAL,MAnEZA,OAAQ,WAuEK,IAAAV,EAALpJ,KAAAG,WAAA4H,KAAA,gBAAiBqB,EAAArH,SACRgI,KAAL5J,WAAA6J,aAAAZ,GACApJ,KAAAqG,OAAA3G,YAAA2B,mBAGQ0I,SAAA,WACJpH,IAAI2G,EAAGK,KAAQlJ,WAAnBuH,KAAA,gBACK3B,EAAOvD,SACZ9C,KAAAG,WAAAkJ,YAAAC,GACHtJ,KAAAqG,OAAA3G,YAAA2B,mBAGGkI,mBAAiB,SAAAjH,GACb,IAAI2H,EAAgBjK,KAARqG,OAAe3G,YAAA+J,cAAA,GAAAzJ,KAAAqG,OAAA3G,YAA0DwK,WAAAlK,KAAAG,YACjFwJ,EAAY7D,EAAAA,GAFpB,OAKK6D,EAAAlJ,KAAA,WACI0J,IAAAA,WACRX,EAnEGxJ,KAAKqG,OAAOpB,yBAHxBjF,KAAAuC,UAAA,GA8EA,MAGC,IAAA,SApEWiH,EAsEIlF,KAAS+B,OAAKA,uBAlElBrG,KAAKoK,SAyEZ,MAGW,IAAKjK,UADjBqJ,EATJxJ,KAAAqG,OAAAf,wBAjvBhBtF,KAAA4J,UA6rBwB,MAGJ,IAAK,SACGJ,EACAxJ,KAAKqG,OAAOgE,wBAGZrK,KAAK6J,SACL7J,KAAKoK,UAGT,MAGJ,IAAK,SACDpK,KAAK8J,SACL,MAGJ,IAAK,WACD9J,KAAK+J,WACL,MAGJ,IAAK,MACD,IAAIpH,EAAOgH,EAAQlJ,KAAK,QACxBT,KAAKqG,OAAOvD,SAASH,EAAM3C,KAAKG,YAChC,MAGJ,IAAK,SACGqJ,EACIS,QAAQxL,MAAM0F,EAAE,MAAO,0DACvBnE,KAAKqG,OAAOP,uBAIhB9F,KAAKmK,iBAQrBA,aAAc,WAENzE,OAAOnB,aACPmB,OAAOnB,YAAYE,QAGvBzE,KAAKG,WAAWmE,SAAStE,KAAKqG,OAAOhC,kBAAkBrE,KAAKG,YAAa,OAAQ3B,EAAE2C,OAAM,WACrFnB,KAAKG,WAAWmK,SAChBtK,KAAKqG,OAAO7D,oBAGRkD,OAAOnB,aACPmB,OAAOnB,YAAYoB,SAGvB3F,KAAKqG,OAAOvB,QAAQ,eAAgB,CAChC7C,OAAQjC,KAAKG,eAElBH,UA7vBnB,CAgwBGuK","file":"MatrixInput.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix input class\n     */\n    Craft.MatrixInput = Garnish.Base.extend(\n        {\n            id: null,\n            blockTypes: null,\n            blockTypesByHandle: null,\n            inputNamePrefix: null,\n            inputIdPrefix: null,\n\n            showingAddBlockMenu: false,\n            addBlockBtnGroupWidth: null,\n            addBlockBtnContainerWidth: null,\n\n            $container: null,\n            $blockContainer: null,\n            $addBlockBtnContainer: null,\n            $addBlockBtnGroup: null,\n            $addBlockBtnGroupBtns: null,\n\n            blockSort: null,\n            blockSelect: null,\n            totalNewBlocks: 0,\n\n            init: function(id, blockTypes, inputNamePrefix, settings) {\n                this.id = id;\n                this.blockTypes = blockTypes;\n                this.inputNamePrefix = inputNamePrefix;\n                this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n\n                // see if settings was actually set to the maxBlocks value\n                if (typeof settings === 'number') {\n                    settings = {maxBlocks: settings};\n                }\n                this.setSettings(settings, Craft.MatrixInput.defaults);\n\n                this.$container = $('#' + this.id);\n                this.$blockContainer = this.$container.children('.blocks');\n                this.$addBlockBtnContainer = this.$container.children('.buttons');\n                this.$addBlockBtnGroup = this.$addBlockBtnContainer.children('.btngroup');\n                this.$addBlockBtnGroupBtns = this.$addBlockBtnGroup.children('.btn');\n                this.$addBlockMenuBtn = this.$addBlockBtnContainer.children('.menubtn');\n\n                this.$container.data('matrix', this);\n\n                this.setNewBlockBtn();\n\n                this.blockTypesByHandle = {};\n\n                var i;\n\n                for (i = 0; i < this.blockTypes.length; i++) {\n                    var blockType = this.blockTypes[i];\n                    this.blockTypesByHandle[blockType.handle] = blockType;\n                }\n\n                var $blocks = this.$blockContainer.children(),\n                    collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n                this.blockSort = new Garnish.DragSort($blocks, {\n                    handle: '> .actions > .move',\n                    axis: 'y',\n                    filter: $.proxy(function() {\n                        // Only return all the selected items if the target item is selected\n                        if (this.blockSort.$targetItem.hasClass('sel')) {\n                            return this.blockSelect.getSelectedItems();\n                        }\n                        else {\n                            return this.blockSort.$targetItem;\n                        }\n                    }, this),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    helperOpacity: 0.9,\n                    onSortChange: $.proxy(function() {\n                        this.blockSelect.resetItemOrder();\n                    }, this)\n                });\n\n                this.blockSelect = new Garnish.Select(this.$blockContainer, $blocks, {\n                    multi: true,\n                    vertical: true,\n                    handle: '> .checkbox, > .titlebar',\n                    checkboxMode: true\n                });\n\n                for (i = 0; i < $blocks.length; i++) {\n                    var $block = $($blocks[i]),\n                        blockId = $block.data('id');\n\n                    // Is this a new block?\n                    var newMatch = (typeof blockId === 'string' && blockId.match(/new(\\d+)/));\n\n                    if (newMatch && newMatch[1] > this.totalNewBlocks) {\n                        this.totalNewBlocks = parseInt(newMatch[1]);\n                    }\n\n                    var block = new MatrixBlock(this, $block);\n\n                    if (block.id && $.inArray('' + block.id, collapsedBlocks) !== -1) {\n                        block.collapse();\n                    }\n                }\n\n                this.addListener(this.$addBlockBtnGroupBtns, 'click', function(ev) {\n                    var type = $(ev.target).data('type');\n                    this.addBlock(type);\n                });\n\n                new Garnish.MenuBtn(this.$addBlockMenuBtn,\n                    {\n                        onOptionSelect: $.proxy(function(option) {\n                            var type = $(option).data('type');\n                            this.addBlock(type);\n                        }, this)\n                    });\n\n                this.updateAddBlockBtn();\n\n                this.addListener(this.$container, 'resize', 'setNewBlockBtn');\n                Garnish.$doc.ready($.proxy(this, 'setNewBlockBtn'));\n\n                this.trigger('afterInit');\n            },\n\n            setNewBlockBtn: function() {\n                // Do we know what the button group width is yet?\n                if (!this.addBlockBtnGroupWidth) {\n                    this.addBlockBtnGroupWidth = this.$addBlockBtnGroup.width();\n\n                    if (!this.addBlockBtnGroupWidth) {\n                        return;\n                    }\n                }\n\n                // Only check if the container width has resized\n                if (this.addBlockBtnContainerWidth !== (this.addBlockBtnContainerWidth = this.$addBlockBtnContainer.width())) {\n                    if (this.addBlockBtnGroupWidth > this.addBlockBtnContainerWidth) {\n                        if (!this.showingAddBlockMenu) {\n                            this.$addBlockBtnGroup.addClass('hidden');\n                            this.$addBlockMenuBtn.removeClass('hidden');\n                            this.showingAddBlockMenu = true;\n                        }\n                    }\n                    else {\n                        if (this.showingAddBlockMenu) {\n                            this.$addBlockMenuBtn.addClass('hidden');\n                            this.$addBlockBtnGroup.removeClass('hidden');\n                            this.showingAddBlockMenu = false;\n\n                            // Because Safari is awesome\n                            if (navigator.userAgent.indexOf('Safari') !== -1) {\n                                Garnish.requestAnimationFrame($.proxy(function() {\n                                    this.$addBlockBtnGroup.css('opacity', 0.99);\n\n                                    Garnish.requestAnimationFrame($.proxy(function() {\n                                        this.$addBlockBtnGroup.css('opacity', '');\n                                    }, this));\n                                }, this));\n                            }\n                        }\n                    }\n                }\n            },\n\n            canAddMoreBlocks: function() {\n                return (!this.maxBlocks || this.$blockContainer.children().length < this.maxBlocks);\n            },\n\n            updateAddBlockBtn: function() {\n                var i, block;\n\n                if (this.canAddMoreBlocks()) {\n                    this.$addBlockBtnGroup.removeClass('disabled');\n                    this.$addBlockMenuBtn.removeClass('disabled');\n\n                    for (i = 0; i < this.blockSelect.$items.length; i++) {\n                        block = this.blockSelect.$items.eq(i).data('block');\n\n                        if (block) {\n                            block.$actionMenu.find('a[data-action=add]').parent().removeClass('disabled');\n                        }\n                    }\n                }\n                else {\n                    this.$addBlockBtnGroup.addClass('disabled');\n                    this.$addBlockMenuBtn.addClass('disabled');\n\n                    for (i = 0; i < this.blockSelect.$items.length; i++) {\n                        block = this.blockSelect.$items.eq(i).data('block');\n\n                        if (block) {\n                            block.$actionMenu.find('a[data-action=add]').parent().addClass('disabled');\n                        }\n                    }\n                }\n            },\n\n            addBlock: function(type, $insertBefore, autofocus) {\n                if (!this.canAddMoreBlocks()) {\n                    return;\n                }\n\n                this.totalNewBlocks++;\n\n                var id = 'new' + this.totalNewBlocks;\n\n                var html = `\n<div class=\"matrixblock\" data-id=\"${id}\" data-type=\"${type}\">\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[sortOrder][]\" value=\"${id}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][type]\" value=\"${type}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][enabled]\" value=\"1\"/>\n  <div class=\"titlebar\">\n    <div class=\"blocktype\">${this.getBlockTypeByHandle(type).name}</div>\n    <div class=\"preview\"></div>\n  </div>\n  <div class=\"checkbox\" title=\"${Craft.t('app', 'Select')}\"></div>\n  <div class=\"actions\">\n    <div class=\"status off\" title=\"${Craft.t('app', 'Disabled')}\"></div>\n    <a class=\"settings icon menubtn\" title=\"${Craft.t('app', 'Actions')}\" role=\"button\"></a> \n    <div class=\"menu\">\n      <ul class=\"padded\">\n        <li><a data-icon=\"collapse\" data-action=\"collapse\">${Craft.t('app', 'Collapse')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"expand\" data-action=\"expand\">${Craft.t('app', 'Expand')}</a></li>\n        <li><a data-icon=\"disabled\" data-action=\"disable\">${Craft.t('app', 'Disable')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"enabled\" data-action=\"enable\">${Craft.t('app', 'Enable')}</a></li>\n        <li><a data-icon=\"uarr\" data-action=\"moveUp\">${Craft.t('app', 'Move up')}</a></li>\n        <li><a data-icon=\"darr\" data-action=\"moveDown\">${Craft.t('app', 'Move down')}</a></li>\n      </ul>`;\n\n                if (!this.settings.staticBlocks) {\n                    html += `\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">\n        <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('app', 'Delete')}</a></li>\n      </ul>\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">`;\n\n                    for (var i = 0; i < this.blockTypes.length; i++) {\n                        var blockType = this.blockTypes[i];\n                        html += `\n        <li><a data-icon=\"plus\" data-action=\"add\" data-type=\"${blockType.handle}\">${Craft.t('app', 'Add {type} above', {type: blockType.name})}</a></li>`;\n                    }\n\n                    html += `\n      </ul>`\n                }\n\n                html += `\n    </div>\n    <a class=\"move icon\" title=\"${Craft.t('app', 'Reorder')}\" role=\"button\"></a>\n  </div>\n</div>`;\n\n                var $block = $(html);\n\n                // Pause the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.pause();\n                }\n\n                if ($insertBefore) {\n                    $block.insertBefore($insertBefore);\n                }\n                else {\n                    $block.appendTo(this.$blockContainer);\n                }\n\n                var $fieldsContainer = $('<div class=\"fields\"/>').appendTo($block),\n                    bodyHtml = this.getParsedBlockHtml(this.blockTypesByHandle[type].bodyHtml, id),\n                    footHtml = this.getParsedBlockHtml(this.blockTypesByHandle[type].footHtml, id);\n\n                $(bodyHtml).appendTo($fieldsContainer);\n\n                this.trigger('blockAdded', {\n                    $block: $block\n                });\n\n                // Animate the block into position\n                $block.css(this.getHiddenBlockCss($block)).velocity({\n                    opacity: 1,\n                    'margin-bottom': 10\n                }, 'fast', $.proxy(function() {\n                    $block.css('margin-bottom', '');\n                    Garnish.$bod.append(footHtml);\n                    Craft.initUiElements($fieldsContainer);\n                    new MatrixBlock(this, $block);\n                    this.blockSort.addItems($block);\n                    this.blockSelect.addItems($block);\n                    this.updateAddBlockBtn();\n\n                    Garnish.requestAnimationFrame(function() {\n                        if (typeof autofocus === 'undefined' || autofocus) {\n                            // Scroll to the block\n                            Garnish.scrollContainerToElement($block);\n                            // Focus on the first text input\n                            $block.find('.text,[contenteditable]').first().trigger('focus');\n                        }\n\n                        // Resume the draft editor\n                        if (window.draftEditor) {\n                            window.draftEditor.resume();\n                        }\n                    });\n                }, this));\n            },\n\n            getBlockTypeByHandle: function(handle) {\n                for (var i = 0; i < this.blockTypes.length; i++) {\n                    if (this.blockTypes[i].handle === handle) {\n                        return this.blockTypes[i];\n                    }\n                }\n            },\n\n            collapseSelectedBlocks: function() {\n                this.callOnSelectedBlocks('collapse');\n            },\n\n            expandSelectedBlocks: function() {\n                this.callOnSelectedBlocks('expand');\n            },\n\n            disableSelectedBlocks: function() {\n                this.callOnSelectedBlocks('disable');\n            },\n\n            enableSelectedBlocks: function() {\n                this.callOnSelectedBlocks('enable');\n            },\n\n            deleteSelectedBlocks: function() {\n                this.callOnSelectedBlocks('selfDestruct');\n            },\n\n            callOnSelectedBlocks: function(fn) {\n                for (var i = 0; i < this.blockSelect.$selectedItems.length; i++) {\n                    this.blockSelect.$selectedItems.eq(i).data('block')[fn]();\n                }\n            },\n\n            getHiddenBlockCss: function($block) {\n                return {\n                    opacity: 0,\n                    marginBottom: -($block.outerHeight())\n                };\n            },\n\n            getParsedBlockHtml: function(html, id) {\n                if (typeof html === 'string') {\n                    return html.replace(new RegExp(`__BLOCK_${this.settings.placeholderKey}__`, 'g'), id);\n                }\n                else {\n                    return '';\n                }\n            },\n\n            get maxBlocks() {\n                return this.settings.maxBlocks;\n            },\n        },\n        {\n            defaults: {\n                placeholderKey: null,\n                maxBlocks: null,\n                staticBlocks: false,\n            },\n\n            collapsedBlockStorageKey: 'Craft-' + Craft.systemUid + '.MatrixInput.collapsedBlocks',\n\n            getCollapsedBlockIds: function() {\n                if (typeof localStorage[Craft.MatrixInput.collapsedBlockStorageKey] === 'string') {\n                    return Craft.filterArray(localStorage[Craft.MatrixInput.collapsedBlockStorageKey].split(','));\n                }\n                else {\n                    return [];\n                }\n            },\n\n            setCollapsedBlockIds: function(ids) {\n                localStorage[Craft.MatrixInput.collapsedBlockStorageKey] = ids.join(',');\n            },\n\n            rememberCollapsedBlockId: function(id) {\n                if (typeof Storage !== 'undefined') {\n                    var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n                    if ($.inArray('' + id, collapsedBlocks) === -1) {\n                        collapsedBlocks.push(id);\n                        Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                    }\n                }\n            },\n\n            forgetCollapsedBlockId: function(id) {\n                if (typeof Storage !== 'undefined') {\n                    var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                        collapsedBlocksIndex = $.inArray('' + id, collapsedBlocks);\n\n                    if (collapsedBlocksIndex !== -1) {\n                        collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                        Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                    }\n                }\n            }\n        });\n\n\n    var MatrixBlock = Garnish.Base.extend(\n        {\n            matrix: null,\n            $container: null,\n            $titlebar: null,\n            $fieldsContainer: null,\n            $previewContainer: null,\n            $actionMenu: null,\n            $collapsedInput: null,\n\n            isNew: null,\n            id: null,\n\n            collapsed: false,\n\n            init: function(matrix, $container) {\n                this.matrix = matrix;\n                this.$container = $container;\n                this.$titlebar = $container.children('.titlebar');\n                this.$previewContainer = this.$titlebar.children('.preview');\n                this.$fieldsContainer = $container.children('.fields');\n\n                this.$container.data('block', this);\n\n                this.id = this.$container.data('id');\n                this.isNew = (!this.id || (typeof this.id === 'string' && this.id.substr(0, 3) === 'new'));\n\n                var $menuBtn = this.$container.find('> .actions > .settings'),\n                    menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                this.$actionMenu = menuBtn.menu.$container;\n\n                menuBtn.menu.settings.onOptionSelect = $.proxy(this, 'onMenuOptionSelect');\n\n                menuBtn.menu.on('show', () => {\n                    this.$container.addClass('active');\n                    if (this.$container.prev('.matrixblock').length) {\n                        this.$actionMenu.find('a[data-action=moveUp]:first').parent().removeClass('hidden');\n                    } else {\n                        this.$actionMenu.find('a[data-action=moveUp]:first').parent().addClass('hidden');\n                    }\n                    if (this.$container.next('.matrixblock').length) {\n                        this.$actionMenu.find('a[data-action=moveDown]:first').parent().removeClass('hidden');\n                    } else {\n                        this.$actionMenu.find('a[data-action=moveDown]:first').parent().addClass('hidden');\n                    }\n                });\n                menuBtn.menu.on('hide', () => {\n                    this.$container.removeClass('active');\n                });\n\n                // Was this block already collapsed?\n                if (Garnish.hasAttr(this.$container, 'data-collapsed')) {\n                    this.collapse();\n                }\n\n                this._handleTitleBarClick = function(ev) {\n                    ev.preventDefault();\n                    this.toggle();\n                };\n\n                this.addListener(this.$titlebar, 'doubletap', this._handleTitleBarClick);\n            },\n\n            toggle: function() {\n                if (this.collapsed) {\n                    this.expand();\n                }\n                else {\n                    this.collapse(true);\n                }\n            },\n\n            collapse: function(animate) {\n                if (this.collapsed) {\n                    return;\n                }\n\n                this.$container.addClass('collapsed');\n\n                var previewHtml = '',\n                    $fields = this.$fieldsContainer.children().children();\n\n                for (var i = 0; i < $fields.length; i++) {\n                    var $field = $($fields[i]),\n                        $inputs = $field.children('.input').find('select,input[type!=\"hidden\"],textarea,.label'),\n                        inputPreviewText = '';\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $($inputs[j]),\n                            value;\n\n                        if ($input.hasClass('label')) {\n                            var $maybeLightswitchContainer = $input.parent().parent();\n\n                            if ($maybeLightswitchContainer.hasClass('lightswitch') && (\n                                    ($maybeLightswitchContainer.hasClass('on') && $input.hasClass('off')) ||\n                                    (!$maybeLightswitchContainer.hasClass('on') && $input.hasClass('on'))\n                                )) {\n                                continue;\n                            }\n\n                            value = $input.text();\n                        }\n                        else {\n                            value = Craft.getText(Garnish.getInputPostVal($input));\n                        }\n\n                        if (value instanceof Array) {\n                            value = value.join(', ');\n                        }\n\n                        if (value) {\n                            value = Craft.trim(value);\n\n                            if (value) {\n                                if (inputPreviewText) {\n                                    inputPreviewText += ', ';\n                                }\n\n                                inputPreviewText += value;\n                            }\n                        }\n                    }\n\n                    if (inputPreviewText) {\n                        previewHtml += (previewHtml ? ' <span>|</span> ' : '') + inputPreviewText;\n                    }\n                }\n\n                this.$previewContainer.html(previewHtml);\n\n                this.$fieldsContainer.velocity('stop');\n                this.$container.velocity('stop');\n\n                if (animate) {\n                    this.$fieldsContainer.velocity('fadeOut', {duration: 'fast'});\n                    this.$container.velocity({height: 16}, 'fast');\n                }\n                else {\n                    this.$previewContainer.show();\n                    this.$fieldsContainer.hide();\n                    this.$container.css({height: 16});\n                }\n\n                setTimeout($.proxy(function() {\n                    this.$actionMenu.find('a[data-action=collapse]:first').parent().addClass('hidden');\n                    this.$actionMenu.find('a[data-action=expand]:first').parent().removeClass('hidden');\n                }, this), 200);\n\n                // Remember that?\n                if (!this.isNew) {\n                    Craft.MatrixInput.rememberCollapsedBlockId(this.id);\n                }\n                else {\n                    if (!this.$collapsedInput) {\n                        this.$collapsedInput = $('<input type=\"hidden\" name=\"' + this.matrix.inputNamePrefix + '[blocks][' + this.id + '][collapsed]\" value=\"1\"/>').appendTo(this.$container);\n                    }\n                    else {\n                        this.$collapsedInput.val('1');\n                    }\n                }\n\n                this.collapsed = true;\n            },\n\n            expand: function() {\n                if (!this.collapsed) {\n                    return;\n                }\n\n                this.$container.removeClass('collapsed');\n\n                this.$fieldsContainer.velocity('stop');\n                this.$container.velocity('stop');\n\n                var collapsedContainerHeight = this.$container.height();\n                this.$container.height('auto');\n                this.$fieldsContainer.show();\n                var expandedContainerHeight = this.$container.height();\n                var displayValue = this.$fieldsContainer.css('display') || 'block';\n                this.$container.height(collapsedContainerHeight);\n                this.$fieldsContainer.hide().velocity('fadeIn', {duration: 'fast', display: displayValue});\n                this.$container.velocity({height: expandedContainerHeight}, 'fast', $.proxy(function() {\n                    this.$previewContainer.html('');\n                    this.$container.height('auto');\n                }, this));\n\n                setTimeout($.proxy(function() {\n                    this.$actionMenu.find('a[data-action=collapse]:first').parent().removeClass('hidden');\n                    this.$actionMenu.find('a[data-action=expand]:first').parent().addClass('hidden');\n                }, this), 200);\n\n                // Remember that?\n                if (!this.isNew && typeof Storage !== 'undefined') {\n                    var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                        collapsedBlocksIndex = $.inArray('' + this.id, collapsedBlocks);\n\n                    if (collapsedBlocksIndex !== -1) {\n                        collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                        Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                    }\n                }\n\n                if (!this.isNew) {\n                    Craft.MatrixInput.forgetCollapsedBlockId(this.id);\n                }\n                else if (this.$collapsedInput) {\n                    this.$collapsedInput.val('');\n                }\n\n                this.collapsed = false;\n            },\n\n            disable: function() {\n                this.$container.children('input[name$=\"[enabled]\"]:first').val('');\n                this.$container.addClass('disabled');\n\n                setTimeout($.proxy(function() {\n                    this.$actionMenu.find('a[data-action=disable]:first').parent().addClass('hidden');\n                    this.$actionMenu.find('a[data-action=enable]:first').parent().removeClass('hidden');\n                }, this), 200);\n\n                this.collapse(true);\n            },\n\n            enable: function() {\n                this.$container.children('input[name$=\"[enabled]\"]:first').val('1');\n                this.$container.removeClass('disabled');\n\n                setTimeout($.proxy(function() {\n                    this.$actionMenu.find('a[data-action=disable]:first').parent().removeClass('hidden');\n                    this.$actionMenu.find('a[data-action=enable]:first').parent().addClass('hidden');\n                }, this), 200);\n            },\n\n            moveUp: function() {\n                let $prev = this.$container.prev('.matrixblock');\n                if ($prev.length) {\n                    this.$container.insertBefore($prev);\n                    this.matrix.blockSelect.resetItemOrder();\n                }\n            },\n\n            moveDown: function() {\n                let $next = this.$container.next('.matrixblock');\n                if ($next.length) {\n                    this.$container.insertAfter($next);\n                    this.matrix.blockSelect.resetItemOrder();\n                }\n            },\n\n            onMenuOptionSelect: function(option) {\n                var batchAction = (this.matrix.blockSelect.totalSelected > 1 && this.matrix.blockSelect.isSelected(this.$container)),\n                    $option = $(option);\n\n                switch ($option.data('action')) {\n                    case 'collapse': {\n                        if (batchAction) {\n                            this.matrix.collapseSelectedBlocks();\n                        }\n                        else {\n                            this.collapse(true);\n                        }\n\n                        break;\n                    }\n\n                    case 'expand': {\n                        if (batchAction) {\n                            this.matrix.expandSelectedBlocks();\n                        }\n                        else {\n                            this.expand();\n                        }\n\n                        break;\n                    }\n\n                    case 'disable': {\n                        if (batchAction) {\n                            this.matrix.disableSelectedBlocks();\n                        }\n                        else {\n                            this.disable();\n                        }\n\n                        break;\n                    }\n\n                    case 'enable': {\n                        if (batchAction) {\n                            this.matrix.enableSelectedBlocks();\n                        }\n                        else {\n                            this.enable();\n                            this.expand();\n                        }\n\n                        break;\n                    }\n\n                    case 'moveUp': {\n                        this.moveUp();\n                        break;\n                    }\n\n                    case 'moveDown': {\n                        this.moveDown();\n                        break;\n                    }\n\n                    case 'add': {\n                        var type = $option.data('type');\n                        this.matrix.addBlock(type, this.$container);\n                        break;\n                    }\n\n                    case 'delete': {\n                        if (batchAction) {\n                            if (confirm(Craft.t('app', 'Are you sure you want to delete the selected blocks?'))) {\n                                this.matrix.deleteSelectedBlocks();\n                            }\n                        }\n                        else {\n                            this.selfDestruct();\n                        }\n\n                        break;\n                    }\n                }\n            },\n\n            selfDestruct: function() {\n                // Pause the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.pause();\n                }\n\n                this.$container.velocity(this.matrix.getHiddenBlockCss(this.$container), 'fast', $.proxy(function() {\n                    this.$container.remove();\n                    this.matrix.updateAddBlockBtn();\n\n                    // Resume the draft editor\n                    if (window.draftEditor) {\n                        window.draftEditor.resume();\n                    }\n\n                    this.matrix.trigger('blockDeleted', {\n                        $block: this.$container,\n                    });\n                }, this));\n            }\n        });\n})(jQuery);\n"]}
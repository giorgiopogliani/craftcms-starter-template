{"version":3,"sources":["variable/variable.js"],"names":["$R","add","translations","en","change","variable","variable-select","modals","init","app","this","lang","opts","toolbar","component","insertion","inspector","selection","onmodal","open","$modal","$form","_build","oncontextbar","e","contextbar","data","parse","target","isComponentType","node","getComponent","buttons","title","get","api","args","remove","set","start","variables","obj","addButton","setIcon","options","width","name","$currentItem","_getCurrent","insert","$item","type","attr","$variable","create","html","insertRaw","current","getCurrent","build","$body","getBody","$label","_buildLabel","$list","_buildList","_buildItems","append","dom","addClass","selectedType","_getCurrentType","items","i","length","trim","$li","on","_toggle","bind","getData","Redactor","mixins","el","utils","undefined","cmnt","_init","_getType","_initWrapper","text","removeInvisibleChars","data-redactor-type","tabindex","contenteditable"],"mappings":"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","file":"variable.js","sourcesContent":["(function($R)\n{\n    $R.add('plugin', 'variable', {\n        translations: {\n            en: {\n                \"change\": \"Change\",\n                \"variable\": \"Variable\",\n                \"variable-select\": \"Please, select a variable\"\n            }\n        },\n        modals: {\n            'variable': ''\n        },\n        init: function(app)\n        {\n            this.app = app;\n            this.lang = app.lang;\n            this.opts = app.opts;\n            this.toolbar = app.toolbar;\n            this.component = app.component;\n            this.insertion = app.insertion;\n            this.inspector = app.inspector;\n            this.selection = app.selection;\n        },\n\n        // messages\n        onmodal: {\n            variable: {\n                open: function($modal, $form)\n                {\n                    this._build($modal);\n                }\n            }\n        },\n        oncontextbar: function(e, contextbar)\n        {\n            var data = this.inspector.parse(e.target)\n            if (data.isComponentType('variable'))\n            {\n                var node = data.getComponent();\n                var buttons = {\n                    \"change\": {\n                        title: this.lang.get('change'),\n                        api: 'plugin.variable.open',\n                        args: node\n                    },\n                    \"remove\": {\n                        title: this.lang.get('delete'),\n                        api: 'plugin.variable.remove',\n                        args: node\n                    }\n                };\n\n                contextbar.set(e, node, buttons, 'bottom');\n            }\n\n\n        },\n\n        // public\n        start: function()\n        {\n            if (!this.opts.variables) return;\n\n            var obj = {\n                title: this.lang.get('variable'),\n                api: 'plugin.variable.open'\n            };\n\n            var $button = this.toolbar.addButton('variable', obj);\n            $button.setIcon('<i class=\"re-icon-variable\"></i>');\n        },\n        open: function()\n\t\t{\n            var options = {\n                title: this.lang.get('variable'),\n                width: '600px',\n                name: 'variable'\n            };\n\n            this.$currentItem = this._getCurrent();\n            this.app.api('module.modal.build', options);\n\t\t},\n\t\tinsert: function($item)\n\t\t{\n    \t\tthis.app.api('module.modal.close');\n\n            var type = $item.attr('data-type');\n            var $variable = this.component.create('variable');\n            $variable.html(type);\n\n            this.insertion.insertRaw($variable);\n\t\t},\n        remove: function(node)\n        {\n            this.component.remove(node);\n        },\n\n        // private\n\t\t_getCurrent: function()\n\t\t{\n    \t\tvar current = this.selection.getCurrent();\n    \t\tvar data = this.inspector.parse(current);\n    \t\tif (data.isComponentType('variable'))\n    \t\t{\n        \t\treturn this.component.build(data.getComponent());\n    \t\t}\n\t\t},\n\t\t_build: function($modal)\n\t\t{\n            var $body = $modal.getBody();\n            var $label = this._buildLabel();\n            var $list = this._buildList();\n\n            this._buildItems($list);\n\n            $body.html('');\n            $body.append($label);\n            $body.append($list);\n\t\t},\n\t\t_buildLabel: function()\n\t\t{\n            var $label = $R.dom('<label>');\n            $label.html(this.lang.parse('## variable-select ##:'));\n\n    \t\treturn $label;\n\t\t},\n\t\t_buildList: function()\n\t\t{\n    \t\tvar $list = $R.dom('<ul>');\n            $list.addClass('redactor-variables-list');\n\n            return $list;\n\t\t},\n\t\t_buildItems: function($list)\n\t\t{\n    \t\tvar selectedType = this._getCurrentType();\n    \t\tvar items = this.opts.variables;\n\n    \t\tfor (var i = 0; i < items.length; i++)\n            {\n                var type = items[i].trim();\n                var $li = $R.dom('<li>');\n                var $item = $R.dom('<span>');\n\n                $item.attr('data-type', type);\n                $item.html(type);\n                $item.on('click', this._toggle.bind(this));\n\n                if (selectedType === type)\n                {\n                    $item.addClass('redactor-variables-item-selected');\n                }\n\n                $li.append($item);\n                $list.append($li);\n            }\n\t\t},\n\t\t_getCurrentType: function()\n\t\t{\n    \t\tif (this.$currentItem)\n    \t\t{\n        \t\tvar variableData = this.$currentItem.getData();\n\n        \t\treturn variableData.type;\n            }\n\n    \t\treturn false;\n\t\t},\n\t\t_toggle: function(e)\n\t\t{\n            var $item = $R.dom(e.target);\n\n            this.app.api('plugin.variable.insert', $item);\n\t\t}\n    });\n})(Redactor);\n(function($R)\n{\n    $R.add('class', 'variable.component', {\n        mixins: ['dom', 'component'],\n        init: function(app, el)\n        {\n            this.app = app;\n            this.utils = app.utils;\n\n            // init\n            return (el && el.cmnt !== undefined) ? el : this._init(el);\n        },\n        // public\n        getData: function()\n        {\n            return {\n                type: this._getType()\n            };\n        },\n\n        // private\n        _init: function(el)\n        {\n            el = el || '<span>';\n\n            this.parse(el);\n            this._initWrapper();\n        },\n        _getType: function()\n        {\n            var text = this.text().trim();\n\n            return this.utils.removeInvisibleChars(text);\n        },\n        _initWrapper: function()\n        {\n            this.addClass('redactor-component');\n            this.attr({\n                'data-redactor-type': 'variable',\n                'tabindex': '-1',\n                'contenteditable': false\n            });\n        }\n    });\n})(Redactor);"]}
{"version":3,"sources":["widget/widget.js"],"names":["Redactor","add","translations","en","widget","widget-html-code","modals","init","app","this","lang","opts","toolbar","component","insertion","inspector","selection","onmodal","opened","$modal","$form","getField","focus","$currentItem","code","decodeURI","attr","val","insert","data","getData","_insert","oncontextbar","e","contextbar","parse","target","isFigcaption","isComponentType","node","getComponent","buttons","edit","title","get","api","args","remove","set","onbutton","observe","button","_observeButton","start","obj","addButton","setIcon","open","_getCurrent","options","width","name","handle","commands","cancel","current","getCurrent","build","trim","html","_isHtmlString","document","createTextNode","$component","create","encodeURI","insertHtml","test","disable","enable"],"mappings":"AAwJGA,SAtJIC,IAAI,SAAU,SAAU,CACvBC,aAAc,CACVC,GAAI,CACAC,OAAU,SACVC,mBAAoB,qBAG5BC,OAAQ,CACJF,OACI,qTAORG,KAAM,SAASC,GAEXC,KAAKD,IAAMA,EACXC,KAAKC,KAAOF,EAAIE,KAChBD,KAAKE,KAAOH,EAAIG,KAChBF,KAAKG,QAAUJ,EAAII,QACnBH,KAAKI,UAAYL,EAAIK,UACrBJ,KAAKK,UAAYN,EAAIM,UACrBL,KAAKM,UAAYP,EAAIO,UACrBN,KAAKO,UAAYR,EAAIQ,WAGzBC,QAAS,CACLb,OAAQ,CACJc,OAAQ,SAASC,EAAQC,GAIrB,GAFAA,EAAMC,SAAS,UAAUC,QAErBb,KAAKc,aACT,CACI,IAAIC,EAAOC,UAAUhB,KAAKc,aAAaG,KAAK,qBAC5CN,EAAMC,SAAS,UAAUM,IAAIH,KAGrCI,OAAQ,SAAST,EAAQC,GAErB,IAAIS,EAAOT,EAAMU,UACjBrB,KAAKsB,QAAQF,MAIzBG,aAAc,SAASC,EAAGC,GAEtB,IAAIL,EAAOpB,KAAKM,UAAUoB,MAAMF,EAAEG,QAClC,IAAKP,EAAKQ,gBAAkBR,EAAKS,gBAAgB,UACjD,CACI,IAAIC,EAAOV,EAAKW,eACZC,EAAU,CACVC,KAAQ,CACJC,MAAOlC,KAAKC,KAAKkC,IAAI,QACrBC,IAAK,qBACLC,KAAMP,GAEVQ,OAAU,CACNJ,MAAOlC,KAAKC,KAAKkC,IAAI,UACrBC,IAAK,uBACLC,KAAMP,IAIdL,EAAWc,IAAIf,EAAGM,EAAME,EAAS,YAGzCQ,SAAU,CACN7C,OAAQ,CACJ8C,QAAS,SAASC,GAEd1C,KAAK2C,eAAeD,MAMhCE,MAAO,WAEH,IAAIC,EAAM,CACNX,MAAOlC,KAAKC,KAAKkC,IAAI,UACrBC,IAAK,qBACLK,QAAS,UAGCzC,KAAKG,QAAQ2C,UAAU,SAAUD,GACvCE,QAAQ,mCAEpBC,KAAM,WAEFhD,KAAKc,aAAed,KAAKiD,cAEzB,IAAIC,EAAU,CACVhB,MAAOlC,KAAKC,KAAKkC,IAAI,UACrBgB,MAAO,QACPC,KAAM,SACNC,OAAQ,SACRC,SAAU,CACNnC,OAAQ,CAAEe,MAAQlC,KAAiB,aAAIA,KAAKC,KAAKkC,IAAI,QAAUnC,KAAKC,KAAKkC,IAAI,WAC7EoB,OAAQ,CAAErB,MAAOlC,KAAKC,KAAKkC,IAAI,aAIvCnC,KAAKD,IAAIqC,IAAI,qBAAsBc,IAEvCZ,OAAQ,SAASR,GAEb9B,KAAKI,UAAUkC,OAAOR,IAIhCmB,YAAa,WAET,IAAIO,EAAUxD,KAAKO,UAAUkD,aACzBrC,EAAOpB,KAAKM,UAAUoB,MAAM8B,GAChC,GAAIpC,EAAKS,gBAAgB,UAErB,OAAO7B,KAAKI,UAAUsD,MAAMtC,EAAKW,iBAGzCT,QAAS,SAASF,GAId,GAFApB,KAAKD,IAAIqC,IAAI,sBAEc,KAAvBhB,EAAKzB,OAAOgE,OAAhB,CAKA,IAAIC,EAAQ5D,KAAK6D,cAAczC,EAAKzB,QAAWyB,EAAKzB,OAASmE,SAASC,eAAe3C,EAAKzB,QAChFqE,EAAahE,KAAKI,UAAU6D,OAAO,SAAUL,GACjDI,EAAW/C,KAAK,mBAAoBiD,UAAU9C,EAAKzB,OAAOgE,SAChE3D,KAAKK,UAAU8D,WAAWH,KAGxBH,cAAe,SAASD,GAEpB,QAAyB,iBAATA,IAAsB,qBAAqBQ,KAAKR,KAE1EjB,eAAgB,SAASD,GAErB,IAAIc,EAAUxD,KAAKO,UAAUkD,aAClBzD,KAAKM,UAAUoB,MAAM8B,GAEvB3B,gBAAgB,SAAUa,EAAO2B,UACrC3B,EAAO4B","file":"widget.js","sourcesContent":["(function($R)\n{\n    $R.add('plugin', 'widget', {\n        translations: {\n            en: {\n                \"widget\": \"Widget\",\n                \"widget-html-code\": \"Widget HTML Code\"\n            }\n        },\n        modals: {\n            'widget':\n                '<form action=\"\"> \\\n                    <div class=\"form-item\"> \\\n                        <label for=\"modal-widget-input\">## widget-html-code ##</label> \\\n                        <textarea id=\"modal-widget-input\" name=\"widget\" style=\"height: 200px;\"></textarea> \\\n                    </div> \\\n                </form>'\n        },\n        init: function(app)\n        {\n            this.app = app;\n            this.lang = app.lang;\n            this.opts = app.opts;\n            this.toolbar = app.toolbar;\n            this.component = app.component;\n            this.insertion = app.insertion;\n            this.inspector = app.inspector;\n            this.selection = app.selection;\n        },\n        // messages\n        onmodal: {\n            widget: {\n                opened: function($modal, $form)\n                {\n                    $form.getField('widget').focus();\n\n                    if (this.$currentItem)\n                    {\n                        var code = decodeURI(this.$currentItem.attr('data-widget-code'));\n                        $form.getField('widget').val(code);\n                    }\n                },\n                insert: function($modal, $form)\n                {\n                    var data = $form.getData();\n                    this._insert(data);\n                }\n            }\n        },\n        oncontextbar: function(e, contextbar)\n        {\n            var data = this.inspector.parse(e.target)\n            if (!data.isFigcaption() && data.isComponentType('widget'))\n            {\n                var node = data.getComponent();\n                var buttons = {\n                    \"edit\": {\n                        title: this.lang.get('edit'),\n                        api: 'plugin.widget.open',\n                        args: node\n                    },\n                    \"remove\": {\n                        title: this.lang.get('delete'),\n                        api: 'plugin.widget.remove',\n                        args: node\n                    }\n                };\n\n                contextbar.set(e, node, buttons, 'bottom');\n            }\n        },\n        onbutton: {\n            widget: {\n                observe: function(button)\n                {\n                    this._observeButton(button);\n                }\n            }\n        },\n\n        // public\n        start: function()\n        {\n            var obj = {\n                title: this.lang.get('widget'),\n                api: 'plugin.widget.open',\n                observe: 'widget'\n            };\n\n            var $button = this.toolbar.addButton('widget', obj);\n            $button.setIcon('<i class=\"re-icon-widget\"></i>');\n        },\n        open: function()\n\t\t{\n            this.$currentItem = this._getCurrent();\n\n            var options = {\n                title: this.lang.get('widget'),\n                width: '600px',\n                name: 'widget',\n                handle: 'insert',\n                commands: {\n                    insert: { title: (this.$currentItem) ? this.lang.get('save') : this.lang.get('insert') },\n                    cancel: { title: this.lang.get('cancel') }\n                }\n            };\n\n            this.app.api('module.modal.build', options);\n\t\t},\n        remove: function(node)\n        {\n            this.component.remove(node);\n        },\n\n        // private\n\t\t_getCurrent: function()\n\t\t{\n    \t\tvar current = this.selection.getCurrent();\n    \t\tvar data = this.inspector.parse(current);\n    \t\tif (data.isComponentType('widget'))\n    \t\t{\n        \t\treturn this.component.build(data.getComponent());\n    \t\t}\n\t\t},\n\t\t_insert: function(data)\n\t\t{\n    \t\tthis.app.api('module.modal.close');\n\n    \t\tif (data.widget.trim() === '')\n    \t\t{\n        \t    return;\n    \t\t}\n\n    \t\tvar html = (this._isHtmlString(data.widget)) ? data.widget : document.createTextNode(data.widget);\n            var $component = this.component.create('widget', html);\n            $component.attr('data-widget-code', encodeURI(data.widget.trim()));\n    \t\tthis.insertion.insertHtml($component);\n\n\t\t},\n        _isHtmlString: function(html)\n        {\n            return !(typeof html === 'string' && !/^\\s*<(\\w+|!)[^>]*>/.test(html));\n        },\n\t\t_observeButton: function(button)\n\t\t{\n    \t\tvar current = this.selection.getCurrent();\n    \t\tvar data = this.inspector.parse(current);\n\n    \t\tif (data.isComponentType('table')) button.disable();\n    \t\telse button.enable();\n\t\t}\n    });\n})(Redactor);"]}
{"version":3,"sources":["CraftElementLinks.js"],"names":["plugin","$","extend","Craft","Redactor","PluginBase","linkOptions","existingText","hack","modalState","selectedLink","text","url","start","showModal","arguments","zIndex","refHandle","callback","this","saveSelection","app","createElementSelectorModal","elementType","storageKey","sources","criteria","defaultSiteId","elementSiteId","autoFocusSearchBox","onSelect","proxy","elements","length","element","restoreSelection","id","siteId","selection","getText","label","api","closeOtherModals","setLinkOptions","onmodal","link","open","modal","form","editor","focus","$form","nodes","find","val","close","button","toolbar","getButton","items","getDropdown","newList","counter","option","title","optionTitle","args","setDropdown","add"],"mappings":"AAAA,IAAIA,OAASC,EAAEC,OAAO,GAAIC,MAAMC,SAASC,WAAY,CACjDC,YAAa,GACbC,aAAc,GACdC,KAAM,KACNC,WAAY,CACRC,aAAc,CACVC,KAAM,KACNC,IAAK,OAKbC,MAAO,aAGPC,UAAW,SAAUC,UAAWC,GAC5B,IAAIC,EAAYF,UAAUE,UACXF,UAAUG,SAEzBC,KAAKC,cAAcD,KAAKE,KAGVlB,MAAMmB,2BAA2BP,UAAUQ,YAAa,CAClEC,WAAY,wBAA0BT,UAAUQ,YAChDE,QAASV,UAAUU,QACnBC,SAAUX,UAAUW,SACpBC,cAAeR,KAAKS,cACpBC,oBAAoB,EACpBC,SAAU7B,EAAE8B,OAAM,SAASC,GACvB,GAAIA,EAASC,OAAQ,CACjB,MAAMC,EAAUF,EAAS,GAEzBb,KAAKgB,iBAAiBhB,KAAKE,KAE3BF,KAAKV,WAAWC,aAAe,CAC3BE,IAAKsB,EAAQtB,IAAM,IAAMK,EAAY,IAAMiB,EAAQE,GAAK,IAAMF,EAAQG,OACtE1B,KAAMQ,KAAKE,IAAIiB,UAAUC,UAAUN,OAAS,EAAId,KAAKE,IAAIiB,UAAUC,UAAYL,EAAQM,OAG3FrB,KAAKE,IAAIoB,IAAI,uBAElBtB,MACHuB,kBAAkB,KAI1BC,eAAgB,SAAUrC,GACtBa,KAAKb,YAAcA,GAGvBsC,QAAS,CACLC,KAAM,CACFC,KAAM,SAASC,EAAOC,GAElB7B,KAAKX,KAAOuC,EAAM1B,IAAI4B,OAAOC,MAC7BH,EAAM1B,IAAI4B,OAAOC,MAAQ,IAAM,KAE/BC,MAAQlD,EAAE+C,EAAKI,OAEXjC,KAAKV,WAAWC,aAAaE,KAC7BuC,MAAME,KAAK,mBAAmBC,IAAInC,KAAKV,WAAWC,aAAaE,KAG/DO,KAAKV,WAAWC,aAAaC,MAC7BwC,MAAME,KAAK,oBAAoBC,IAAInC,KAAKV,WAAWC,aAAaC,MAGpEQ,KAAKV,WAAWC,aAAe,CAC3BC,KAAM,KACNC,IAAK,OAIb2C,MAAO,SAAUR,GAEbA,EAAM1B,IAAI4B,OAAOC,MAAQ/B,KAAKX,KAC9BW,KAAKX,KAAO,QAKxBmC,eAAgB,SAAUrC,GACtB,IAAIkD,EAASrC,KAAKE,IAAIoC,QAAQC,UAAU,QAEpCC,EADWH,EAAOI,cACDD,MACjBE,EAAU,GACVC,EAAU,EAEd,IAAK,IAAIC,KAAUzD,EACfyD,EAASzD,EAAYyD,GACrBF,EAAQ,YAAYC,GAAY,CAC5BE,MAAOD,EAAOE,YACdxB,IAAK,qCACLyB,KAAM,CACF3C,YAAawC,EAAOxC,YACpBN,UAAW8C,EAAO9C,UAClBQ,QAASsC,EAAOtC,QAChBC,SAAUqC,EAAOrC,WAK7B8B,EAAOW,YAAYlE,EAAEC,OAAO2D,EAASF,OAM1CvD,SADIgE,IAAI,SAAU,oBAAqBpE","file":"CraftElementLinks.min.js","sourcesContent":["var plugin = $.extend({}, Craft.Redactor.PluginBase, {\n    linkOptions: [],\n    existingText: '',\n    hack: null,\n    modalState: {\n        selectedLink: {\n            text: null,\n            url: null\n        }\n    },\n\n    // Do nothing on start.\n    start: function () {\n\n    },\n    showModal: function (arguments, zIndex) {\n        let refHandle = arguments.refHandle,\n            callback = arguments.callback;\n\n        this.saveSelection(this.app);\n\n        // Create a new one each time because Redactor creates a new one and we can't reuse the references.\n        const modal = Craft.createElementSelectorModal(arguments.elementType, {\n            storageKey: 'RedactorInput.LinkTo.' + arguments.elementType,\n            sources: arguments.sources,\n            criteria: arguments.criteria,\n            defaultSiteId: this.elementSiteId,\n            autoFocusSearchBox: false,\n            onSelect: $.proxy(function(elements) {\n                if (elements.length) {\n                    const element = elements[0];\n\n                    this.restoreSelection(this.app);\n\n                    this.modalState.selectedLink = {\n                        url: element.url + '#' + refHandle + ':' + element.id + '@' + element.siteId,\n                        text: this.app.selection.getText().length > 0 ? this.app.selection.getText() : element.label\n                    }\n\n                    this.app.api('module.link.open');\n                }\n            }, this),\n            closeOtherModals: false,\n        });\n    },\n\n    setLinkOptions: function (linkOptions) {\n        this.linkOptions = linkOptions;\n    },\n\n    onmodal: {\n        link: {\n            open: function(modal, form) {\n                // Prevent Redactor from aggressively refocusing, when we don't want it to.\n                this.hack = modal.app.editor.focus;\n                modal.app.editor.focus = () => null;\n\n                $form = $(form.nodes);\n\n                if (this.modalState.selectedLink.url) {\n                    $form.find('input[name=url]').val(this.modalState.selectedLink.url);\n                }\n\n                if (this.modalState.selectedLink.text) {\n                    $form.find('input[name=text]').val(this.modalState.selectedLink.text);\n                }\n\n                this.modalState.selectedLink = {\n                    text: null,\n                    url: null\n                };\n\n            },\n            close: function (modal) {\n                // Revert the functionality.\n                modal.app.editor.focus = this.hack;\n                this.hack = null;\n            }\n        }\n    },\n\n    setLinkOptions: function (linkOptions) {\n        var button = this.app.toolbar.getButton('link'),\n            dropdown = button.getDropdown(),\n            items = dropdown.items,\n            newList = {},\n            counter = 0;\n\n        for (var option in linkOptions) {\n            option = linkOptions[option];\n            newList['custom'+(++counter)] = {\n                title: option.optionTitle,\n                api: 'plugin.craftElementLinks.showModal',\n                args: {\n                    elementType: option.elementType,\n                    refHandle: option.refHandle,\n                    sources: option.sources,\n                    criteria: option.criteria\n                }\n            };\n        }\n\n        button.setDropdown($.extend(newList, items));\n    }\n});\n\n(function($R) {\n    $R.add('plugin', 'craftElementLinks', plugin);\n})(Redactor);\n"]}